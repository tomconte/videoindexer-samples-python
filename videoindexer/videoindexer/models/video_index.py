# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoIndex(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'animation_model_id': 'str',
        'detect_source_language': 'bool',
        'external_id': 'str',
        'external_url': 'str',
        'failure_code': 'InternalFailureCode',
        'failure_message': 'str',
        'id': 'str',
        'indexing_preset': 'str',
        'insights': 'OneOfVideoIndexInsights',
        'is_adult': 'bool',
        'language': 'OneOfVideoIndexLanguage',
        'language_auto_detect_mode': 'LanguageAutoDetectMode',
        'languages': 'OneOfVideoIndexLanguages',
        'linguistic_model_id': 'str',
        'metadata': 'str',
        'moderation_state': 'ModerationState',
        'person_model_id': 'str',
        'privacy_mode': 'PrivacyMode',
        'processing_progress': 'str',
        'published_proxy_url': 'str',
        'published_url': 'str',
        'review_state': 'ReviewState',
        'source_language': 'OneOfVideoIndexSourceLanguage',
        'source_languages': 'OneOfVideoIndexSourceLanguages',
        'state': 'VideoState',
        'thumbnail_id': 'str',
        'view_token': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'animation_model_id': 'animationModelId',
        'detect_source_language': 'detectSourceLanguage',
        'external_id': 'externalId',
        'external_url': 'externalUrl',
        'failure_code': 'failureCode',
        'failure_message': 'failureMessage',
        'id': 'id',
        'indexing_preset': 'indexingPreset',
        'insights': 'insights',
        'is_adult': 'isAdult',
        'language': 'language',
        'language_auto_detect_mode': 'languageAutoDetectMode',
        'languages': 'languages',
        'linguistic_model_id': 'linguisticModelId',
        'metadata': 'metadata',
        'moderation_state': 'moderationState',
        'person_model_id': 'personModelId',
        'privacy_mode': 'privacyMode',
        'processing_progress': 'processingProgress',
        'published_proxy_url': 'publishedProxyUrl',
        'published_url': 'publishedUrl',
        'review_state': 'reviewState',
        'source_language': 'sourceLanguage',
        'source_languages': 'sourceLanguages',
        'state': 'state',
        'thumbnail_id': 'thumbnailId',
        'view_token': 'viewToken'
    }

    def __init__(self, account_id=None, animation_model_id=None, detect_source_language=None, external_id=None, external_url=None, failure_code=None, failure_message=None, id=None, indexing_preset=None, insights=None, is_adult=None, language=None, language_auto_detect_mode=None, languages=None, linguistic_model_id=None, metadata=None, moderation_state=None, person_model_id=None, privacy_mode=None, processing_progress=None, published_proxy_url=None, published_url=None, review_state=None, source_language=None, source_languages=None, state=None, thumbnail_id=None, view_token=None):  # noqa: E501
        """VideoIndex - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._animation_model_id = None
        self._detect_source_language = None
        self._external_id = None
        self._external_url = None
        self._failure_code = None
        self._failure_message = None
        self._id = None
        self._indexing_preset = None
        self._insights = None
        self._is_adult = None
        self._language = None
        self._language_auto_detect_mode = None
        self._languages = None
        self._linguistic_model_id = None
        self._metadata = None
        self._moderation_state = None
        self._person_model_id = None
        self._privacy_mode = None
        self._processing_progress = None
        self._published_proxy_url = None
        self._published_url = None
        self._review_state = None
        self._source_language = None
        self._source_languages = None
        self._state = None
        self._thumbnail_id = None
        self._view_token = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if animation_model_id is not None:
            self.animation_model_id = animation_model_id
        if detect_source_language is not None:
            self.detect_source_language = detect_source_language
        if external_id is not None:
            self.external_id = external_id
        if external_url is not None:
            self.external_url = external_url
        if failure_code is not None:
            self.failure_code = failure_code
        if failure_message is not None:
            self.failure_message = failure_message
        if id is not None:
            self.id = id
        if indexing_preset is not None:
            self.indexing_preset = indexing_preset
        if insights is not None:
            self.insights = insights
        if is_adult is not None:
            self.is_adult = is_adult
        if language is not None:
            self.language = language
        if language_auto_detect_mode is not None:
            self.language_auto_detect_mode = language_auto_detect_mode
        if languages is not None:
            self.languages = languages
        if linguistic_model_id is not None:
            self.linguistic_model_id = linguistic_model_id
        if metadata is not None:
            self.metadata = metadata
        if moderation_state is not None:
            self.moderation_state = moderation_state
        if person_model_id is not None:
            self.person_model_id = person_model_id
        if privacy_mode is not None:
            self.privacy_mode = privacy_mode
        if processing_progress is not None:
            self.processing_progress = processing_progress
        if published_proxy_url is not None:
            self.published_proxy_url = published_proxy_url
        if published_url is not None:
            self.published_url = published_url
        if review_state is not None:
            self.review_state = review_state
        if source_language is not None:
            self.source_language = source_language
        if source_languages is not None:
            self.source_languages = source_languages
        if state is not None:
            self.state = state
        if thumbnail_id is not None:
            self.thumbnail_id = thumbnail_id
        if view_token is not None:
            self.view_token = view_token

    @property
    def account_id(self):
        """Gets the account_id of this VideoIndex.  # noqa: E501


        :return: The account_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VideoIndex.


        :param account_id: The account_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def animation_model_id(self):
        """Gets the animation_model_id of this VideoIndex.  # noqa: E501


        :return: The animation_model_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._animation_model_id

    @animation_model_id.setter
    def animation_model_id(self, animation_model_id):
        """Sets the animation_model_id of this VideoIndex.


        :param animation_model_id: The animation_model_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._animation_model_id = animation_model_id

    @property
    def detect_source_language(self):
        """Gets the detect_source_language of this VideoIndex.  # noqa: E501


        :return: The detect_source_language of this VideoIndex.  # noqa: E501
        :rtype: bool
        """
        return self._detect_source_language

    @detect_source_language.setter
    def detect_source_language(self, detect_source_language):
        """Sets the detect_source_language of this VideoIndex.


        :param detect_source_language: The detect_source_language of this VideoIndex.  # noqa: E501
        :type: bool
        """

        self._detect_source_language = detect_source_language

    @property
    def external_id(self):
        """Gets the external_id of this VideoIndex.  # noqa: E501


        :return: The external_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VideoIndex.


        :param external_id: The external_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def external_url(self):
        """Gets the external_url of this VideoIndex.  # noqa: E501


        :return: The external_url of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this VideoIndex.


        :param external_url: The external_url of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def failure_code(self):
        """Gets the failure_code of this VideoIndex.  # noqa: E501


        :return: The failure_code of this VideoIndex.  # noqa: E501
        :rtype: InternalFailureCode
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this VideoIndex.


        :param failure_code: The failure_code of this VideoIndex.  # noqa: E501
        :type: InternalFailureCode
        """

        self._failure_code = failure_code

    @property
    def failure_message(self):
        """Gets the failure_message of this VideoIndex.  # noqa: E501


        :return: The failure_message of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this VideoIndex.


        :param failure_message: The failure_message of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def id(self):
        """Gets the id of this VideoIndex.  # noqa: E501


        :return: The id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoIndex.


        :param id: The id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def indexing_preset(self):
        """Gets the indexing_preset of this VideoIndex.  # noqa: E501


        :return: The indexing_preset of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._indexing_preset

    @indexing_preset.setter
    def indexing_preset(self, indexing_preset):
        """Sets the indexing_preset of this VideoIndex.


        :param indexing_preset: The indexing_preset of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._indexing_preset = indexing_preset

    @property
    def insights(self):
        """Gets the insights of this VideoIndex.  # noqa: E501


        :return: The insights of this VideoIndex.  # noqa: E501
        :rtype: OneOfVideoIndexInsights
        """
        return self._insights

    @insights.setter
    def insights(self, insights):
        """Sets the insights of this VideoIndex.


        :param insights: The insights of this VideoIndex.  # noqa: E501
        :type: OneOfVideoIndexInsights
        """

        self._insights = insights

    @property
    def is_adult(self):
        """Gets the is_adult of this VideoIndex.  # noqa: E501


        :return: The is_adult of this VideoIndex.  # noqa: E501
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this VideoIndex.


        :param is_adult: The is_adult of this VideoIndex.  # noqa: E501
        :type: bool
        """

        self._is_adult = is_adult

    @property
    def language(self):
        """Gets the language of this VideoIndex.  # noqa: E501


        :return: The language of this VideoIndex.  # noqa: E501
        :rtype: OneOfVideoIndexLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VideoIndex.


        :param language: The language of this VideoIndex.  # noqa: E501
        :type: OneOfVideoIndexLanguage
        """

        self._language = language

    @property
    def language_auto_detect_mode(self):
        """Gets the language_auto_detect_mode of this VideoIndex.  # noqa: E501


        :return: The language_auto_detect_mode of this VideoIndex.  # noqa: E501
        :rtype: LanguageAutoDetectMode
        """
        return self._language_auto_detect_mode

    @language_auto_detect_mode.setter
    def language_auto_detect_mode(self, language_auto_detect_mode):
        """Sets the language_auto_detect_mode of this VideoIndex.


        :param language_auto_detect_mode: The language_auto_detect_mode of this VideoIndex.  # noqa: E501
        :type: LanguageAutoDetectMode
        """

        self._language_auto_detect_mode = language_auto_detect_mode

    @property
    def languages(self):
        """Gets the languages of this VideoIndex.  # noqa: E501


        :return: The languages of this VideoIndex.  # noqa: E501
        :rtype: OneOfVideoIndexLanguages
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this VideoIndex.


        :param languages: The languages of this VideoIndex.  # noqa: E501
        :type: OneOfVideoIndexLanguages
        """

        self._languages = languages

    @property
    def linguistic_model_id(self):
        """Gets the linguistic_model_id of this VideoIndex.  # noqa: E501


        :return: The linguistic_model_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._linguistic_model_id

    @linguistic_model_id.setter
    def linguistic_model_id(self, linguistic_model_id):
        """Sets the linguistic_model_id of this VideoIndex.


        :param linguistic_model_id: The linguistic_model_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._linguistic_model_id = linguistic_model_id

    @property
    def metadata(self):
        """Gets the metadata of this VideoIndex.  # noqa: E501


        :return: The metadata of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VideoIndex.


        :param metadata: The metadata of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def moderation_state(self):
        """Gets the moderation_state of this VideoIndex.  # noqa: E501


        :return: The moderation_state of this VideoIndex.  # noqa: E501
        :rtype: ModerationState
        """
        return self._moderation_state

    @moderation_state.setter
    def moderation_state(self, moderation_state):
        """Sets the moderation_state of this VideoIndex.


        :param moderation_state: The moderation_state of this VideoIndex.  # noqa: E501
        :type: ModerationState
        """

        self._moderation_state = moderation_state

    @property
    def person_model_id(self):
        """Gets the person_model_id of this VideoIndex.  # noqa: E501


        :return: The person_model_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._person_model_id

    @person_model_id.setter
    def person_model_id(self, person_model_id):
        """Sets the person_model_id of this VideoIndex.


        :param person_model_id: The person_model_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._person_model_id = person_model_id

    @property
    def privacy_mode(self):
        """Gets the privacy_mode of this VideoIndex.  # noqa: E501


        :return: The privacy_mode of this VideoIndex.  # noqa: E501
        :rtype: PrivacyMode
        """
        return self._privacy_mode

    @privacy_mode.setter
    def privacy_mode(self, privacy_mode):
        """Sets the privacy_mode of this VideoIndex.


        :param privacy_mode: The privacy_mode of this VideoIndex.  # noqa: E501
        :type: PrivacyMode
        """

        self._privacy_mode = privacy_mode

    @property
    def processing_progress(self):
        """Gets the processing_progress of this VideoIndex.  # noqa: E501


        :return: The processing_progress of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._processing_progress

    @processing_progress.setter
    def processing_progress(self, processing_progress):
        """Sets the processing_progress of this VideoIndex.


        :param processing_progress: The processing_progress of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._processing_progress = processing_progress

    @property
    def published_proxy_url(self):
        """Gets the published_proxy_url of this VideoIndex.  # noqa: E501


        :return: The published_proxy_url of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._published_proxy_url

    @published_proxy_url.setter
    def published_proxy_url(self, published_proxy_url):
        """Sets the published_proxy_url of this VideoIndex.


        :param published_proxy_url: The published_proxy_url of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._published_proxy_url = published_proxy_url

    @property
    def published_url(self):
        """Gets the published_url of this VideoIndex.  # noqa: E501


        :return: The published_url of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._published_url

    @published_url.setter
    def published_url(self, published_url):
        """Sets the published_url of this VideoIndex.


        :param published_url: The published_url of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._published_url = published_url

    @property
    def review_state(self):
        """Gets the review_state of this VideoIndex.  # noqa: E501


        :return: The review_state of this VideoIndex.  # noqa: E501
        :rtype: ReviewState
        """
        return self._review_state

    @review_state.setter
    def review_state(self, review_state):
        """Sets the review_state of this VideoIndex.


        :param review_state: The review_state of this VideoIndex.  # noqa: E501
        :type: ReviewState
        """

        self._review_state = review_state

    @property
    def source_language(self):
        """Gets the source_language of this VideoIndex.  # noqa: E501


        :return: The source_language of this VideoIndex.  # noqa: E501
        :rtype: OneOfVideoIndexSourceLanguage
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this VideoIndex.


        :param source_language: The source_language of this VideoIndex.  # noqa: E501
        :type: OneOfVideoIndexSourceLanguage
        """

        self._source_language = source_language

    @property
    def source_languages(self):
        """Gets the source_languages of this VideoIndex.  # noqa: E501


        :return: The source_languages of this VideoIndex.  # noqa: E501
        :rtype: OneOfVideoIndexSourceLanguages
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this VideoIndex.


        :param source_languages: The source_languages of this VideoIndex.  # noqa: E501
        :type: OneOfVideoIndexSourceLanguages
        """

        self._source_languages = source_languages

    @property
    def state(self):
        """Gets the state of this VideoIndex.  # noqa: E501


        :return: The state of this VideoIndex.  # noqa: E501
        :rtype: VideoState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VideoIndex.


        :param state: The state of this VideoIndex.  # noqa: E501
        :type: VideoState
        """

        self._state = state

    @property
    def thumbnail_id(self):
        """Gets the thumbnail_id of this VideoIndex.  # noqa: E501


        :return: The thumbnail_id of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_id

    @thumbnail_id.setter
    def thumbnail_id(self, thumbnail_id):
        """Sets the thumbnail_id of this VideoIndex.


        :param thumbnail_id: The thumbnail_id of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._thumbnail_id = thumbnail_id

    @property
    def view_token(self):
        """Gets the view_token of this VideoIndex.  # noqa: E501


        :return: The view_token of this VideoIndex.  # noqa: E501
        :rtype: str
        """
        return self._view_token

    @view_token.setter
    def view_token(self, view_token):
        """Sets the view_token of this VideoIndex.


        :param view_token: The view_token of this VideoIndex.  # noqa: E501
        :type: str
        """

        self._view_token = view_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoIndex, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoIndex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
