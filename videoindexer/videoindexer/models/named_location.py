# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NamedLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confidence': 'float',
        'description': 'str',
        'id': 'int',
        'instances': 'list[NamedEntityElementInstance]',
        'is_custom': 'bool',
        'name': 'str',
        'reference_id': 'str',
        'reference_url': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'confidence': 'confidence',
        'description': 'description',
        'id': 'id',
        'instances': 'instances',
        'is_custom': 'isCustom',
        'name': 'name',
        'reference_id': 'referenceId',
        'reference_url': 'referenceUrl',
        'tags': 'tags'
    }

    def __init__(self, confidence=None, description=None, id=None, instances=None, is_custom=None, name=None, reference_id=None, reference_url=None, tags=None):  # noqa: E501
        """NamedLocation - a model defined in Swagger"""  # noqa: E501
        self._confidence = None
        self._description = None
        self._id = None
        self._instances = None
        self._is_custom = None
        self._name = None
        self._reference_id = None
        self._reference_url = None
        self._tags = None
        self.discriminator = None
        if confidence is not None:
            self.confidence = confidence
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if instances is not None:
            self.instances = instances
        if is_custom is not None:
            self.is_custom = is_custom
        if name is not None:
            self.name = name
        if reference_id is not None:
            self.reference_id = reference_id
        if reference_url is not None:
            self.reference_url = reference_url
        if tags is not None:
            self.tags = tags

    @property
    def confidence(self):
        """Gets the confidence of this NamedLocation.  # noqa: E501


        :return: The confidence of this NamedLocation.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this NamedLocation.


        :param confidence: The confidence of this NamedLocation.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def description(self):
        """Gets the description of this NamedLocation.  # noqa: E501


        :return: The description of this NamedLocation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NamedLocation.


        :param description: The description of this NamedLocation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this NamedLocation.  # noqa: E501


        :return: The id of this NamedLocation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NamedLocation.


        :param id: The id of this NamedLocation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this NamedLocation.  # noqa: E501


        :return: The instances of this NamedLocation.  # noqa: E501
        :rtype: list[NamedEntityElementInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this NamedLocation.


        :param instances: The instances of this NamedLocation.  # noqa: E501
        :type: list[NamedEntityElementInstance]
        """

        self._instances = instances

    @property
    def is_custom(self):
        """Gets the is_custom of this NamedLocation.  # noqa: E501


        :return: The is_custom of this NamedLocation.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this NamedLocation.


        :param is_custom: The is_custom of this NamedLocation.  # noqa: E501
        :type: bool
        """

        self._is_custom = is_custom

    @property
    def name(self):
        """Gets the name of this NamedLocation.  # noqa: E501


        :return: The name of this NamedLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NamedLocation.


        :param name: The name of this NamedLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reference_id(self):
        """Gets the reference_id of this NamedLocation.  # noqa: E501


        :return: The reference_id of this NamedLocation.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this NamedLocation.


        :param reference_id: The reference_id of this NamedLocation.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def reference_url(self):
        """Gets the reference_url of this NamedLocation.  # noqa: E501


        :return: The reference_url of this NamedLocation.  # noqa: E501
        :rtype: str
        """
        return self._reference_url

    @reference_url.setter
    def reference_url(self, reference_url):
        """Sets the reference_url of this NamedLocation.


        :param reference_url: The reference_url of this NamedLocation.  # noqa: E501
        :type: str
        """

        self._reference_url = reference_url

    @property
    def tags(self):
        """Gets the tags of this NamedLocation.  # noqa: E501


        :return: The tags of this NamedLocation.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NamedLocation.


        :param tags: The tags of this NamedLocation.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamedLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamedLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
