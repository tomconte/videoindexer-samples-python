# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectRenderOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'OneOfProjectRenderOperationError',
        'result': 'OneOfProjectRenderOperationResult',
        'state': 'AsyncOperationState'
    }

    attribute_map = {
        'error': 'error',
        'result': 'result',
        'state': 'state'
    }

    def __init__(self, error=None, result=None, state=None):  # noqa: E501
        """ProjectRenderOperation - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._result = None
        self._state = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if result is not None:
            self.result = result
        if state is not None:
            self.state = state

    @property
    def error(self):
        """Gets the error of this ProjectRenderOperation.  # noqa: E501


        :return: The error of this ProjectRenderOperation.  # noqa: E501
        :rtype: OneOfProjectRenderOperationError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProjectRenderOperation.


        :param error: The error of this ProjectRenderOperation.  # noqa: E501
        :type: OneOfProjectRenderOperationError
        """

        self._error = error

    @property
    def result(self):
        """Gets the result of this ProjectRenderOperation.  # noqa: E501


        :return: The result of this ProjectRenderOperation.  # noqa: E501
        :rtype: OneOfProjectRenderOperationResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ProjectRenderOperation.


        :param result: The result of this ProjectRenderOperation.  # noqa: E501
        :type: OneOfProjectRenderOperationResult
        """

        self._result = result

    @property
    def state(self):
        """Gets the state of this ProjectRenderOperation.  # noqa: E501


        :return: The state of this ProjectRenderOperation.  # noqa: E501
        :rtype: AsyncOperationState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProjectRenderOperation.


        :param state: The state of this ProjectRenderOperation.  # noqa: E501
        :type: AsyncOperationState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectRenderOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectRenderOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
