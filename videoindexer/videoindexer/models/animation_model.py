# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnimationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created': 'datetime',
        'custom_vision_link': 'str',
        'id': 'str',
        'last_modified': 'datetime',
        'last_publish_date': 'datetime',
        'name': 'str',
        'status': 'AnimationModelTrainingStatus'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created': 'created',
        'custom_vision_link': 'customVisionLink',
        'id': 'id',
        'last_modified': 'lastModified',
        'last_publish_date': 'lastPublishDate',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, account_id=None, created=None, custom_vision_link=None, id=None, last_modified=None, last_publish_date=None, name=None, status=None):  # noqa: E501
        """AnimationModel - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._created = None
        self._custom_vision_link = None
        self._id = None
        self._last_modified = None
        self._last_publish_date = None
        self._name = None
        self._status = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if created is not None:
            self.created = created
        if custom_vision_link is not None:
            self.custom_vision_link = custom_vision_link
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if last_publish_date is not None:
            self.last_publish_date = last_publish_date
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this AnimationModel.  # noqa: E501


        :return: The account_id of this AnimationModel.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AnimationModel.


        :param account_id: The account_id of this AnimationModel.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created(self):
        """Gets the created of this AnimationModel.  # noqa: E501


        :return: The created of this AnimationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnimationModel.


        :param created: The created of this AnimationModel.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def custom_vision_link(self):
        """Gets the custom_vision_link of this AnimationModel.  # noqa: E501


        :return: The custom_vision_link of this AnimationModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_vision_link

    @custom_vision_link.setter
    def custom_vision_link(self, custom_vision_link):
        """Sets the custom_vision_link of this AnimationModel.


        :param custom_vision_link: The custom_vision_link of this AnimationModel.  # noqa: E501
        :type: str
        """

        self._custom_vision_link = custom_vision_link

    @property
    def id(self):
        """Gets the id of this AnimationModel.  # noqa: E501


        :return: The id of this AnimationModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnimationModel.


        :param id: The id of this AnimationModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this AnimationModel.  # noqa: E501


        :return: The last_modified of this AnimationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AnimationModel.


        :param last_modified: The last_modified of this AnimationModel.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def last_publish_date(self):
        """Gets the last_publish_date of this AnimationModel.  # noqa: E501


        :return: The last_publish_date of this AnimationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_publish_date

    @last_publish_date.setter
    def last_publish_date(self, last_publish_date):
        """Sets the last_publish_date of this AnimationModel.


        :param last_publish_date: The last_publish_date of this AnimationModel.  # noqa: E501
        :type: datetime
        """

        self._last_publish_date = last_publish_date

    @property
    def name(self):
        """Gets the name of this AnimationModel.  # noqa: E501


        :return: The name of this AnimationModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnimationModel.


        :param name: The name of this AnimationModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this AnimationModel.  # noqa: E501


        :return: The status of this AnimationModel.  # noqa: E501
        :rtype: AnimationModelTrainingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnimationModel.


        :param status: The status of this AnimationModel.  # noqa: E501
        :type: AnimationModelTrainingStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnimationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnimationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
