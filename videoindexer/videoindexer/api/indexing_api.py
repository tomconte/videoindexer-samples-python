# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from videoindexer.api_client import ApiClient


class IndexingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_video_index(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Index  # noqa: E501

        Get Video Index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_index(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str language: The language to translate video insights. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool re_translate: Indicates whether to re-translate the video and overwrite existing translation for the given language or leave existing translation.
        :param bool include_streaming_urls: Indicates whether to include streaming urls in the video index.
        :param str included_insights: Insights to include in the response. For example, to include only Transcript and Faces in the insights, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will include all insights.
        :param str excluded_insights: Insights to exclude from the response. For example, to get all insights except Transcript and Faces, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will exclude no insight. This query parameter cannot be provided if the 'includeInsights' parameter is provided.
        :param bool include_summarized_insights: Whether to include the deprecated SummarizedInsights field. It is recommended to pass 'false'.
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_index_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_index_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_index_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Index  # noqa: E501

        Get Video Index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_index_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str language: The language to translate video insights. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool re_translate: Indicates whether to re-translate the video and overwrite existing translation for the given language or leave existing translation.
        :param bool include_streaming_urls: Indicates whether to include streaming urls in the video index.
        :param str included_insights: Insights to include in the response. For example, to include only Transcript and Faces in the insights, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will include all insights.
        :param str excluded_insights: Insights to exclude from the response. For example, to get all insights except Transcript and Faces, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will exclude no insight. This query parameter cannot be provided if the 'includeInsights' parameter is provided.
        :param bool include_summarized_insights: Whether to include the deprecated SummarizedInsights field. It is recommended to pass 'false'.
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'language', 're_translate', 'include_streaming_urls', 'included_insights', 'excluded_insights', 'include_summarized_insights', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_index`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_index`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 're_translate' in params:
            query_params.append(('reTranslate', params['re_translate']))  # noqa: E501
        if 'include_streaming_urls' in params:
            query_params.append(('includeStreamingUrls', params['include_streaming_urls']))  # noqa: E501
        if 'included_insights' in params:
            query_params.append(('includedInsights', params['included_insights']))  # noqa: E501
        if 'excluded_insights' in params:
            query_params.append(('excludedInsights', params['excluded_insights']))  # noqa: E501
        if 'include_summarized_insights' in params:
            query_params.append(('includeSummarizedInsights', params['include_summarized_insights']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Index', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def re_index_video(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Re-Index Video  # noqa: E501

        Re-index video  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.re_index_video(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str indexing_preset: The indexing preset to use. Allowed values: Default / AudioOnly / VideoOnly / BasicAudio / Advanced / AdvancedAudio / AdvancedVideo
        :param str streaming_preset: The streaming preset to use. Allowed values: NoStreaming / Default / SingleBitrate / AdaptiveBitrate
        :param str callback_url: Format - uri. A url to send notifications to (POST). These are the supported notifications: 1. Video indexing completed:    2 additional query string parameters will be added to the url: id and state.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&state=Processed'.  2. A face was identified (after the face was trained in another video):    4 additional query string parameters will be added to the url: id, faceId, knownPersonId and personName.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&faceId=1234&knownPersonId=B689EC08-FAB6-497A-A727-DA7285DBD436&personName=JohnSmith'.
        :param str source_language: The language of the video, to be used when generating the transcript: Auto-detect single language - 'auto', Auto-detect multi language (preview) - 'multi'.. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully indexed
        :param str linguistic_model_id: Linguistic model id as received by 'create linguistic model' call
        :param str person_model_id: Faces will be identified against the provided person model.
        :param str animation_model_id: Animations will be identified against the provided animation model.
        :param str priority: Index priority, can be used in paid regions only. Allowed values: Low / Normal / High
        :param str brands_categories: List of brands categories delimited by comma. Azure Video Indexer will only take these categories in to account when indexing. If not specified all brands will be used.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.re_index_video_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.re_index_video_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def re_index_video_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Re-Index Video  # noqa: E501

        Re-index video  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.re_index_video_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str indexing_preset: The indexing preset to use. Allowed values: Default / AudioOnly / VideoOnly / BasicAudio / Advanced / AdvancedAudio / AdvancedVideo
        :param str streaming_preset: The streaming preset to use. Allowed values: NoStreaming / Default / SingleBitrate / AdaptiveBitrate
        :param str callback_url: Format - uri. A url to send notifications to (POST). These are the supported notifications: 1. Video indexing completed:    2 additional query string parameters will be added to the url: id and state.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&state=Processed'.  2. A face was identified (after the face was trained in another video):    4 additional query string parameters will be added to the url: id, faceId, knownPersonId and personName.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&faceId=1234&knownPersonId=B689EC08-FAB6-497A-A727-DA7285DBD436&personName=JohnSmith'.
        :param str source_language: The language of the video, to be used when generating the transcript: Auto-detect single language - 'auto', Auto-detect multi language (preview) - 'multi'.. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully indexed
        :param str linguistic_model_id: Linguistic model id as received by 'create linguistic model' call
        :param str person_model_id: Faces will be identified against the provided person model.
        :param str animation_model_id: Animations will be identified against the provided animation model.
        :param str priority: Index priority, can be used in paid regions only. Allowed values: Low / Normal / High
        :param str brands_categories: List of brands categories delimited by comma. Azure Video Indexer will only take these categories in to account when indexing. If not specified all brands will be used.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'indexing_preset', 'streaming_preset', 'callback_url', 'source_language', 'send_success_email', 'linguistic_model_id', 'person_model_id', 'animation_model_id', 'priority', 'brands_categories', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method re_index_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `re_index_video`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `re_index_video`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `re_index_video`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'indexing_preset' in params:
            query_params.append(('indexingPreset', params['indexing_preset']))  # noqa: E501
        if 'streaming_preset' in params:
            query_params.append(('streamingPreset', params['streaming_preset']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackUrl', params['callback_url']))  # noqa: E501
        if 'source_language' in params:
            query_params.append(('sourceLanguage', params['source_language']))  # noqa: E501
        if 'send_success_email' in params:
            query_params.append(('sendSuccessEmail', params['send_success_email']))  # noqa: E501
        if 'linguistic_model_id' in params:
            query_params.append(('linguisticModelId', params['linguistic_model_id']))  # noqa: E501
        if 'person_model_id' in params:
            query_params.append(('personModelId', params['person_model_id']))  # noqa: E501
        if 'animation_model_id' in params:
            query_params.append(('animationModelId', params['animation_model_id']))  # noqa: E501
        if 'priority' in params:
            query_params.append(('priority', params['priority']))  # noqa: E501
        if 'brands_categories' in params:
            query_params.append(('brandsCategories', params['brands_categories']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/ReIndex', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_video(self, location, account_id, **kwargs):  # noqa: E501
        """Upload Video  # noqa: E501

        Uploads the given video, starts indexing it and returns a new Video id.<br> The supported formats are listed  < a href = https://aka.ms/vi-supported-formats target=\"_blank\"> here</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_video(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str name: The video name
        :param str privacy: The video privacy mode. Allowed values: Private / Public
        :param str priority: Index priority, can be used in paid regions only. Allowed values: Low / Normal / High
        :param str description: The video description.
        :param str partition: A partition to partition videos by (used for searching a specific partition)
        :param str external_id: An external id to associate with the video (can be searched for later).
        :param str external_url: Format - uri. An external URL to associate with the video (can be retrieved later)
        :param str callback_url: Format - uri. A url to send notifications to (POST). These are the supported notifications: 1. Video indexing completed:    2 additional query string parameters will be added to the url: id and state.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&state=Processed'.  2. A face was identified (after the face was trained in another video):    4 additional query string parameters will be added to the url: id, faceId, knownPersonId and personName.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&faceId=1234&knownPersonId=B689EC08-FAB6-497A-A727-DA7285DBD436&personName=JohnSmith'.
        :param str metadata: Metadata to associate with the video (will be returned in queries).
        :param str language: The language of the video, to be used when generating the transcript: Auto-detect single language - 'auto', Auto-detect multi language (preview) - 'multi'.. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param str video_url: Format - uri. A public url of the video/audio file (url encoded). It is recommended to use readonly urls (e.g. when using Azure Storage SAS urls). If not specified, the file should be passed as a multipart/form body content.
        :param str file_name: The uploaded file name.
        :param str indexing_preset: The indexing preset to use. Allowed values: Default / AudioOnly / VideoOnly / BasicAudio / Advanced / AdvancedAudio / AdvancedVideo
        :param str streaming_preset: The streaming preset to use. Allowed values: NoStreaming / Default / SingleBitrate / AdaptiveBitrate
        :param str linguistic_model_id: Linguistic model id as received by 'create linguistic model' call
        :param str person_model_id: Faces will be identified against the provided person model.
        :param str animation_model_id: Animations will be identified against the provided animation model.
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully indexed
        :param str asset_id: Azure media services asset id. Used to index from existing assets in your connected Azure media services account. (Paid only)
        :param str brands_categories: List of brands categories delimited by comma. Azure Video Indexer will only take these categories in to account when indexing. If not specified all brands will be used.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_video_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_video_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def upload_video_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Upload Video  # noqa: E501

        Uploads the given video, starts indexing it and returns a new Video id.<br> The supported formats are listed  < a href = https://aka.ms/vi-supported-formats target=\"_blank\"> here</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_video_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str name: The video name
        :param str privacy: The video privacy mode. Allowed values: Private / Public
        :param str priority: Index priority, can be used in paid regions only. Allowed values: Low / Normal / High
        :param str description: The video description.
        :param str partition: A partition to partition videos by (used for searching a specific partition)
        :param str external_id: An external id to associate with the video (can be searched for later).
        :param str external_url: Format - uri. An external URL to associate with the video (can be retrieved later)
        :param str callback_url: Format - uri. A url to send notifications to (POST). These are the supported notifications: 1. Video indexing completed:    2 additional query string parameters will be added to the url: id and state.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&state=Processed'.  2. A face was identified (after the face was trained in another video):    4 additional query string parameters will be added to the url: id, faceId, knownPersonId and personName.     For example, if the callback url is 'https://test.com/notifyme?projectName=MyProject', the notification will be sent to 'https://test.com/notifyme?projectName=MyProject&id=12345abcde&faceId=1234&knownPersonId=B689EC08-FAB6-497A-A727-DA7285DBD436&personName=JohnSmith'.
        :param str metadata: Metadata to associate with the video (will be returned in queries).
        :param str language: The language of the video, to be used when generating the transcript: Auto-detect single language - 'auto', Auto-detect multi language (preview) - 'multi'.. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param str video_url: Format - uri. A public url of the video/audio file (url encoded). It is recommended to use readonly urls (e.g. when using Azure Storage SAS urls). If not specified, the file should be passed as a multipart/form body content.
        :param str file_name: The uploaded file name.
        :param str indexing_preset: The indexing preset to use. Allowed values: Default / AudioOnly / VideoOnly / BasicAudio / Advanced / AdvancedAudio / AdvancedVideo
        :param str streaming_preset: The streaming preset to use. Allowed values: NoStreaming / Default / SingleBitrate / AdaptiveBitrate
        :param str linguistic_model_id: Linguistic model id as received by 'create linguistic model' call
        :param str person_model_id: Faces will be identified against the provided person model.
        :param str animation_model_id: Animations will be identified against the provided animation model.
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully indexed
        :param str asset_id: Azure media services asset id. Used to index from existing assets in your connected Azure media services account. (Paid only)
        :param str brands_categories: List of brands categories delimited by comma. Azure Video Indexer will only take these categories in to account when indexing. If not specified all brands will be used.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'name', 'privacy', 'priority', 'description', 'partition', 'external_id', 'external_url', 'callback_url', 'metadata', 'language', 'video_url', 'file_name', 'indexing_preset', 'streaming_preset', 'linguistic_model_id', 'person_model_id', 'animation_model_id', 'send_success_email', 'asset_id', 'brands_categories', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `upload_video`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `upload_video`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'privacy' in params:
            query_params.append(('privacy', params['privacy']))  # noqa: E501
        if 'priority' in params:
            query_params.append(('priority', params['priority']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'partition' in params:
            query_params.append(('partition', params['partition']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'external_url' in params:
            query_params.append(('externalUrl', params['external_url']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackUrl', params['callback_url']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'video_url' in params:
            query_params.append(('videoUrl', params['video_url']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'indexing_preset' in params:
            query_params.append(('indexingPreset', params['indexing_preset']))  # noqa: E501
        if 'streaming_preset' in params:
            query_params.append(('streamingPreset', params['streaming_preset']))  # noqa: E501
        if 'linguistic_model_id' in params:
            query_params.append(('linguisticModelId', params['linguistic_model_id']))  # noqa: E501
        if 'person_model_id' in params:
            query_params.append(('personModelId', params['person_model_id']))  # noqa: E501
        if 'animation_model_id' in params:
            query_params.append(('animationModelId', params['animation_model_id']))  # noqa: E501
        if 'send_success_email' in params:
            query_params.append(('sendSuccessEmail', params['send_success_email']))  # noqa: E501
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
        if 'brands_categories' in params:
            query_params.append(('brandsCategories', params['brands_categories']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
