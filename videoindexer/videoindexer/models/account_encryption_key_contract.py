# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountEncryptionKeyContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_name': 'str',
        'key_vault_base_url': 'str',
        'key_version': 'str'
    }

    attribute_map = {
        'key_name': 'keyName',
        'key_vault_base_url': 'keyVaultBaseUrl',
        'key_version': 'keyVersion'
    }

    def __init__(self, key_name=None, key_vault_base_url=None, key_version=None):  # noqa: E501
        """AccountEncryptionKeyContract - a model defined in Swagger"""  # noqa: E501
        self._key_name = None
        self._key_vault_base_url = None
        self._key_version = None
        self.discriminator = None
        self.key_name = key_name
        self.key_vault_base_url = key_vault_base_url
        self.key_version = key_version

    @property
    def key_name(self):
        """Gets the key_name of this AccountEncryptionKeyContract.  # noqa: E501


        :return: The key_name of this AccountEncryptionKeyContract.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this AccountEncryptionKeyContract.


        :param key_name: The key_name of this AccountEncryptionKeyContract.  # noqa: E501
        :type: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")  # noqa: E501

        self._key_name = key_name

    @property
    def key_vault_base_url(self):
        """Gets the key_vault_base_url of this AccountEncryptionKeyContract.  # noqa: E501


        :return: The key_vault_base_url of this AccountEncryptionKeyContract.  # noqa: E501
        :rtype: str
        """
        return self._key_vault_base_url

    @key_vault_base_url.setter
    def key_vault_base_url(self, key_vault_base_url):
        """Sets the key_vault_base_url of this AccountEncryptionKeyContract.


        :param key_vault_base_url: The key_vault_base_url of this AccountEncryptionKeyContract.  # noqa: E501
        :type: str
        """
        if key_vault_base_url is None:
            raise ValueError("Invalid value for `key_vault_base_url`, must not be `None`")  # noqa: E501

        self._key_vault_base_url = key_vault_base_url

    @property
    def key_version(self):
        """Gets the key_version of this AccountEncryptionKeyContract.  # noqa: E501


        :return: The key_version of this AccountEncryptionKeyContract.  # noqa: E501
        :rtype: str
        """
        return self._key_version

    @key_version.setter
    def key_version(self, key_version):
        """Sets the key_version of this AccountEncryptionKeyContract.


        :param key_version: The key_version of this AccountEncryptionKeyContract.  # noqa: E501
        :type: str
        """
        if key_version is None:
            raise ValueError("Invalid value for `key_version`, must not be `None`")  # noqa: E501

        self._key_version = key_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountEncryptionKeyContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountEncryptionKeyContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
