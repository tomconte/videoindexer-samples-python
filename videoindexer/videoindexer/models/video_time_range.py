# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoTimeRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'range': 'OneOfVideoTimeRangeRange',
        'video_id': 'str'
    }

    attribute_map = {
        'range': 'range',
        'video_id': 'videoId'
    }

    def __init__(self, range=None, video_id=None):  # noqa: E501
        """VideoTimeRange - a model defined in Swagger"""  # noqa: E501
        self._range = None
        self._video_id = None
        self.discriminator = None
        if range is not None:
            self.range = range
        if video_id is not None:
            self.video_id = video_id

    @property
    def range(self):
        """Gets the range of this VideoTimeRange.  # noqa: E501


        :return: The range of this VideoTimeRange.  # noqa: E501
        :rtype: OneOfVideoTimeRangeRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this VideoTimeRange.


        :param range: The range of this VideoTimeRange.  # noqa: E501
        :type: OneOfVideoTimeRangeRange
        """

        self._range = range

    @property
    def video_id(self):
        """Gets the video_id of this VideoTimeRange.  # noqa: E501


        :return: The video_id of this VideoTimeRange.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this VideoTimeRange.


        :param video_id: The video_id of this VideoTimeRange.  # noqa: E501
        :type: str
        """

        self._video_id = video_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoTimeRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoTimeRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
