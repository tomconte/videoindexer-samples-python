# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoInsightsStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'correspondence_count': 'int',
        'speaker_longest_monolog': 'dict(str, int)',
        'speaker_number_of_fragments': 'dict(str, int)',
        'speaker_talk_to_listen_ratio': 'dict(str, float)',
        'speaker_word_count': 'dict(str, int)'
    }

    attribute_map = {
        'correspondence_count': 'correspondenceCount',
        'speaker_longest_monolog': 'speakerLongestMonolog',
        'speaker_number_of_fragments': 'speakerNumberOfFragments',
        'speaker_talk_to_listen_ratio': 'speakerTalkToListenRatio',
        'speaker_word_count': 'speakerWordCount'
    }

    def __init__(self, correspondence_count=None, speaker_longest_monolog=None, speaker_number_of_fragments=None, speaker_talk_to_listen_ratio=None, speaker_word_count=None):  # noqa: E501
        """VideoInsightsStatistics - a model defined in Swagger"""  # noqa: E501
        self._correspondence_count = None
        self._speaker_longest_monolog = None
        self._speaker_number_of_fragments = None
        self._speaker_talk_to_listen_ratio = None
        self._speaker_word_count = None
        self.discriminator = None
        if correspondence_count is not None:
            self.correspondence_count = correspondence_count
        if speaker_longest_monolog is not None:
            self.speaker_longest_monolog = speaker_longest_monolog
        if speaker_number_of_fragments is not None:
            self.speaker_number_of_fragments = speaker_number_of_fragments
        if speaker_talk_to_listen_ratio is not None:
            self.speaker_talk_to_listen_ratio = speaker_talk_to_listen_ratio
        if speaker_word_count is not None:
            self.speaker_word_count = speaker_word_count

    @property
    def correspondence_count(self):
        """Gets the correspondence_count of this VideoInsightsStatistics.  # noqa: E501


        :return: The correspondence_count of this VideoInsightsStatistics.  # noqa: E501
        :rtype: int
        """
        return self._correspondence_count

    @correspondence_count.setter
    def correspondence_count(self, correspondence_count):
        """Sets the correspondence_count of this VideoInsightsStatistics.


        :param correspondence_count: The correspondence_count of this VideoInsightsStatistics.  # noqa: E501
        :type: int
        """

        self._correspondence_count = correspondence_count

    @property
    def speaker_longest_monolog(self):
        """Gets the speaker_longest_monolog of this VideoInsightsStatistics.  # noqa: E501


        :return: The speaker_longest_monolog of this VideoInsightsStatistics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._speaker_longest_monolog

    @speaker_longest_monolog.setter
    def speaker_longest_monolog(self, speaker_longest_monolog):
        """Sets the speaker_longest_monolog of this VideoInsightsStatistics.


        :param speaker_longest_monolog: The speaker_longest_monolog of this VideoInsightsStatistics.  # noqa: E501
        :type: dict(str, int)
        """

        self._speaker_longest_monolog = speaker_longest_monolog

    @property
    def speaker_number_of_fragments(self):
        """Gets the speaker_number_of_fragments of this VideoInsightsStatistics.  # noqa: E501


        :return: The speaker_number_of_fragments of this VideoInsightsStatistics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._speaker_number_of_fragments

    @speaker_number_of_fragments.setter
    def speaker_number_of_fragments(self, speaker_number_of_fragments):
        """Sets the speaker_number_of_fragments of this VideoInsightsStatistics.


        :param speaker_number_of_fragments: The speaker_number_of_fragments of this VideoInsightsStatistics.  # noqa: E501
        :type: dict(str, int)
        """

        self._speaker_number_of_fragments = speaker_number_of_fragments

    @property
    def speaker_talk_to_listen_ratio(self):
        """Gets the speaker_talk_to_listen_ratio of this VideoInsightsStatistics.  # noqa: E501


        :return: The speaker_talk_to_listen_ratio of this VideoInsightsStatistics.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._speaker_talk_to_listen_ratio

    @speaker_talk_to_listen_ratio.setter
    def speaker_talk_to_listen_ratio(self, speaker_talk_to_listen_ratio):
        """Sets the speaker_talk_to_listen_ratio of this VideoInsightsStatistics.


        :param speaker_talk_to_listen_ratio: The speaker_talk_to_listen_ratio of this VideoInsightsStatistics.  # noqa: E501
        :type: dict(str, float)
        """

        self._speaker_talk_to_listen_ratio = speaker_talk_to_listen_ratio

    @property
    def speaker_word_count(self):
        """Gets the speaker_word_count of this VideoInsightsStatistics.  # noqa: E501


        :return: The speaker_word_count of this VideoInsightsStatistics.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._speaker_word_count

    @speaker_word_count.setter
    def speaker_word_count(self, speaker_word_count):
        """Sets the speaker_word_count of this VideoInsightsStatistics.


        :param speaker_word_count: The speaker_word_count of this VideoInsightsStatistics.  # noqa: E501
        :type: dict(str, int)
        """

        self._speaker_word_count = speaker_word_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoInsightsStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoInsightsStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
