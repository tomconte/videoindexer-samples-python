# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SingleLanguage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'description': 'str',
        'is_cris_support_language': 'bool',
        'is_primary_language_for_code': 'bool',
        'is_source_language': 'bool',
        'native_name': 'str',
        'right_to_left': 'bool',
        'supported_user_locale': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'description': 'description',
        'is_cris_support_language': 'isCrisSupportLanguage',
        'is_primary_language_for_code': 'isPrimaryLanguageForCode',
        'is_source_language': 'isSourceLanguage',
        'native_name': 'nativeName',
        'right_to_left': 'rightToLeft',
        'supported_user_locale': 'supportedUserLocale'
    }

    def __init__(self, code=None, description=None, is_cris_support_language=None, is_primary_language_for_code=None, is_source_language=None, native_name=None, right_to_left=None, supported_user_locale=None):  # noqa: E501
        """SingleLanguage - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._description = None
        self._is_cris_support_language = None
        self._is_primary_language_for_code = None
        self._is_source_language = None
        self._native_name = None
        self._right_to_left = None
        self._supported_user_locale = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if is_cris_support_language is not None:
            self.is_cris_support_language = is_cris_support_language
        if is_primary_language_for_code is not None:
            self.is_primary_language_for_code = is_primary_language_for_code
        if is_source_language is not None:
            self.is_source_language = is_source_language
        if native_name is not None:
            self.native_name = native_name
        if right_to_left is not None:
            self.right_to_left = right_to_left
        if supported_user_locale is not None:
            self.supported_user_locale = supported_user_locale

    @property
    def code(self):
        """Gets the code of this SingleLanguage.  # noqa: E501


        :return: The code of this SingleLanguage.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SingleLanguage.


        :param code: The code of this SingleLanguage.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this SingleLanguage.  # noqa: E501


        :return: The description of this SingleLanguage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SingleLanguage.


        :param description: The description of this SingleLanguage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_cris_support_language(self):
        """Gets the is_cris_support_language of this SingleLanguage.  # noqa: E501


        :return: The is_cris_support_language of this SingleLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._is_cris_support_language

    @is_cris_support_language.setter
    def is_cris_support_language(self, is_cris_support_language):
        """Sets the is_cris_support_language of this SingleLanguage.


        :param is_cris_support_language: The is_cris_support_language of this SingleLanguage.  # noqa: E501
        :type: bool
        """

        self._is_cris_support_language = is_cris_support_language

    @property
    def is_primary_language_for_code(self):
        """Gets the is_primary_language_for_code of this SingleLanguage.  # noqa: E501


        :return: The is_primary_language_for_code of this SingleLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_language_for_code

    @is_primary_language_for_code.setter
    def is_primary_language_for_code(self, is_primary_language_for_code):
        """Sets the is_primary_language_for_code of this SingleLanguage.


        :param is_primary_language_for_code: The is_primary_language_for_code of this SingleLanguage.  # noqa: E501
        :type: bool
        """

        self._is_primary_language_for_code = is_primary_language_for_code

    @property
    def is_source_language(self):
        """Gets the is_source_language of this SingleLanguage.  # noqa: E501


        :return: The is_source_language of this SingleLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._is_source_language

    @is_source_language.setter
    def is_source_language(self, is_source_language):
        """Sets the is_source_language of this SingleLanguage.


        :param is_source_language: The is_source_language of this SingleLanguage.  # noqa: E501
        :type: bool
        """

        self._is_source_language = is_source_language

    @property
    def native_name(self):
        """Gets the native_name of this SingleLanguage.  # noqa: E501


        :return: The native_name of this SingleLanguage.  # noqa: E501
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this SingleLanguage.


        :param native_name: The native_name of this SingleLanguage.  # noqa: E501
        :type: str
        """

        self._native_name = native_name

    @property
    def right_to_left(self):
        """Gets the right_to_left of this SingleLanguage.  # noqa: E501


        :return: The right_to_left of this SingleLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._right_to_left

    @right_to_left.setter
    def right_to_left(self, right_to_left):
        """Sets the right_to_left of this SingleLanguage.


        :param right_to_left: The right_to_left of this SingleLanguage.  # noqa: E501
        :type: bool
        """

        self._right_to_left = right_to_left

    @property
    def supported_user_locale(self):
        """Gets the supported_user_locale of this SingleLanguage.  # noqa: E501


        :return: The supported_user_locale of this SingleLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._supported_user_locale

    @supported_user_locale.setter
    def supported_user_locale(self, supported_user_locale):
        """Sets the supported_user_locale of this SingleLanguage.


        :param supported_user_locale: The supported_user_locale of this SingleLanguage.  # noqa: E501
        :type: bool
        """

        self._supported_user_locale = supported_user_locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleLanguage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleLanguage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
