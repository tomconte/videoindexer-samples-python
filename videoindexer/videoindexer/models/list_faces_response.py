# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListFacesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_size': 'int',
        'results': 'list[Face]',
        'skip': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'page_size': 'pageSize',
        'results': 'results',
        'skip': 'skip',
        'total_count': 'totalCount'
    }

    def __init__(self, page_size=None, results=None, skip=None, total_count=None):  # noqa: E501
        """ListFacesResponse - a model defined in Swagger"""  # noqa: E501
        self._page_size = None
        self._results = None
        self._skip = None
        self._total_count = None
        self.discriminator = None
        if page_size is not None:
            self.page_size = page_size
        if results is not None:
            self.results = results
        if skip is not None:
            self.skip = skip
        if total_count is not None:
            self.total_count = total_count

    @property
    def page_size(self):
        """Gets the page_size of this ListFacesResponse.  # noqa: E501


        :return: The page_size of this ListFacesResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ListFacesResponse.


        :param page_size: The page_size of this ListFacesResponse.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def results(self):
        """Gets the results of this ListFacesResponse.  # noqa: E501


        :return: The results of this ListFacesResponse.  # noqa: E501
        :rtype: list[Face]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ListFacesResponse.


        :param results: The results of this ListFacesResponse.  # noqa: E501
        :type: list[Face]
        """

        self._results = results

    @property
    def skip(self):
        """Gets the skip of this ListFacesResponse.  # noqa: E501


        :return: The skip of this ListFacesResponse.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this ListFacesResponse.


        :param skip: The skip of this ListFacesResponse.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def total_count(self):
        """Gets the total_count of this ListFacesResponse.  # noqa: E501


        :return: The total_count of this ListFacesResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ListFacesResponse.


        :param total_count: The total_count of this ListFacesResponse.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListFacesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListFacesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
