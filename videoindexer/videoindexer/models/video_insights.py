# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoInsights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'animated_characters': 'list[AnimatedCharacterInsight]',
        'audio_effects': 'list[AudioEffectInsight]',
        'blocks': 'list[BlockInsight]',
        'brands': 'list[BrandInsight]',
        'clapperboards': 'list[ClapperboardInsight]',
        'duration': 'str',
        'emotions': 'list[EmotionInsight]',
        'faces': 'list[FaceInsight]',
        'frame_patterns': 'list[FramePatternInsight]',
        'keywords': 'list[KeywordInsight]',
        'labels': 'list[LabelInsight]',
        'language': 'OneOfVideoInsightsLanguage',
        'languages': 'OneOfVideoInsightsLanguages',
        'named_locations': 'list[NamedLocation]',
        'named_people': 'list[NamedPerson]',
        'observed_people': 'list[ObservedPersonInsight]',
        'ocr': 'list[OcrInsight]',
        'scenes': 'list[SceneInsight]',
        'sentiments': 'list[SentimentInsight]',
        'shots': 'list[ShotInsight]',
        'source_language': 'OneOfVideoInsightsSourceLanguage',
        'source_language_confidence': 'float',
        'source_languages': 'OneOfVideoInsightsSourceLanguages',
        'speakers': 'list[SpeakerInsight]',
        'statistics': 'OneOfVideoInsightsStatistics',
        'textual_content_moderation': 'OneOfVideoInsightsTextualContentModeration',
        'topics': 'list[TopicInsight]',
        'transcript': 'list[TranscriptLineInsight]',
        'version': 'str',
        'visual_content_moderation': 'list[VisualContentModerationInsight]'
    }

    attribute_map = {
        'animated_characters': 'animatedCharacters',
        'audio_effects': 'audioEffects',
        'blocks': 'blocks',
        'brands': 'brands',
        'clapperboards': 'clapperboards',
        'duration': 'duration',
        'emotions': 'emotions',
        'faces': 'faces',
        'frame_patterns': 'framePatterns',
        'keywords': 'keywords',
        'labels': 'labels',
        'language': 'language',
        'languages': 'languages',
        'named_locations': 'namedLocations',
        'named_people': 'namedPeople',
        'observed_people': 'observedPeople',
        'ocr': 'ocr',
        'scenes': 'scenes',
        'sentiments': 'sentiments',
        'shots': 'shots',
        'source_language': 'sourceLanguage',
        'source_language_confidence': 'sourceLanguageConfidence',
        'source_languages': 'sourceLanguages',
        'speakers': 'speakers',
        'statistics': 'statistics',
        'textual_content_moderation': 'textualContentModeration',
        'topics': 'topics',
        'transcript': 'transcript',
        'version': 'version',
        'visual_content_moderation': 'visualContentModeration'
    }

    def __init__(self, animated_characters=None, audio_effects=None, blocks=None, brands=None, clapperboards=None, duration=None, emotions=None, faces=None, frame_patterns=None, keywords=None, labels=None, language=None, languages=None, named_locations=None, named_people=None, observed_people=None, ocr=None, scenes=None, sentiments=None, shots=None, source_language=None, source_language_confidence=None, source_languages=None, speakers=None, statistics=None, textual_content_moderation=None, topics=None, transcript=None, version=None, visual_content_moderation=None):  # noqa: E501
        """VideoInsights - a model defined in Swagger"""  # noqa: E501
        self._animated_characters = None
        self._audio_effects = None
        self._blocks = None
        self._brands = None
        self._clapperboards = None
        self._duration = None
        self._emotions = None
        self._faces = None
        self._frame_patterns = None
        self._keywords = None
        self._labels = None
        self._language = None
        self._languages = None
        self._named_locations = None
        self._named_people = None
        self._observed_people = None
        self._ocr = None
        self._scenes = None
        self._sentiments = None
        self._shots = None
        self._source_language = None
        self._source_language_confidence = None
        self._source_languages = None
        self._speakers = None
        self._statistics = None
        self._textual_content_moderation = None
        self._topics = None
        self._transcript = None
        self._version = None
        self._visual_content_moderation = None
        self.discriminator = None
        if animated_characters is not None:
            self.animated_characters = animated_characters
        if audio_effects is not None:
            self.audio_effects = audio_effects
        if blocks is not None:
            self.blocks = blocks
        if brands is not None:
            self.brands = brands
        if clapperboards is not None:
            self.clapperboards = clapperboards
        if duration is not None:
            self.duration = duration
        if emotions is not None:
            self.emotions = emotions
        if faces is not None:
            self.faces = faces
        if frame_patterns is not None:
            self.frame_patterns = frame_patterns
        if keywords is not None:
            self.keywords = keywords
        if labels is not None:
            self.labels = labels
        if language is not None:
            self.language = language
        if languages is not None:
            self.languages = languages
        if named_locations is not None:
            self.named_locations = named_locations
        if named_people is not None:
            self.named_people = named_people
        if observed_people is not None:
            self.observed_people = observed_people
        if ocr is not None:
            self.ocr = ocr
        if scenes is not None:
            self.scenes = scenes
        if sentiments is not None:
            self.sentiments = sentiments
        if shots is not None:
            self.shots = shots
        if source_language is not None:
            self.source_language = source_language
        if source_language_confidence is not None:
            self.source_language_confidence = source_language_confidence
        if source_languages is not None:
            self.source_languages = source_languages
        if speakers is not None:
            self.speakers = speakers
        if statistics is not None:
            self.statistics = statistics
        if textual_content_moderation is not None:
            self.textual_content_moderation = textual_content_moderation
        if topics is not None:
            self.topics = topics
        if transcript is not None:
            self.transcript = transcript
        if version is not None:
            self.version = version
        if visual_content_moderation is not None:
            self.visual_content_moderation = visual_content_moderation

    @property
    def animated_characters(self):
        """Gets the animated_characters of this VideoInsights.  # noqa: E501


        :return: The animated_characters of this VideoInsights.  # noqa: E501
        :rtype: list[AnimatedCharacterInsight]
        """
        return self._animated_characters

    @animated_characters.setter
    def animated_characters(self, animated_characters):
        """Sets the animated_characters of this VideoInsights.


        :param animated_characters: The animated_characters of this VideoInsights.  # noqa: E501
        :type: list[AnimatedCharacterInsight]
        """

        self._animated_characters = animated_characters

    @property
    def audio_effects(self):
        """Gets the audio_effects of this VideoInsights.  # noqa: E501


        :return: The audio_effects of this VideoInsights.  # noqa: E501
        :rtype: list[AudioEffectInsight]
        """
        return self._audio_effects

    @audio_effects.setter
    def audio_effects(self, audio_effects):
        """Sets the audio_effects of this VideoInsights.


        :param audio_effects: The audio_effects of this VideoInsights.  # noqa: E501
        :type: list[AudioEffectInsight]
        """

        self._audio_effects = audio_effects

    @property
    def blocks(self):
        """Gets the blocks of this VideoInsights.  # noqa: E501


        :return: The blocks of this VideoInsights.  # noqa: E501
        :rtype: list[BlockInsight]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this VideoInsights.


        :param blocks: The blocks of this VideoInsights.  # noqa: E501
        :type: list[BlockInsight]
        """

        self._blocks = blocks

    @property
    def brands(self):
        """Gets the brands of this VideoInsights.  # noqa: E501


        :return: The brands of this VideoInsights.  # noqa: E501
        :rtype: list[BrandInsight]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this VideoInsights.


        :param brands: The brands of this VideoInsights.  # noqa: E501
        :type: list[BrandInsight]
        """

        self._brands = brands

    @property
    def clapperboards(self):
        """Gets the clapperboards of this VideoInsights.  # noqa: E501


        :return: The clapperboards of this VideoInsights.  # noqa: E501
        :rtype: list[ClapperboardInsight]
        """
        return self._clapperboards

    @clapperboards.setter
    def clapperboards(self, clapperboards):
        """Sets the clapperboards of this VideoInsights.


        :param clapperboards: The clapperboards of this VideoInsights.  # noqa: E501
        :type: list[ClapperboardInsight]
        """

        self._clapperboards = clapperboards

    @property
    def duration(self):
        """Gets the duration of this VideoInsights.  # noqa: E501


        :return: The duration of this VideoInsights.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoInsights.


        :param duration: The duration of this VideoInsights.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def emotions(self):
        """Gets the emotions of this VideoInsights.  # noqa: E501


        :return: The emotions of this VideoInsights.  # noqa: E501
        :rtype: list[EmotionInsight]
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this VideoInsights.


        :param emotions: The emotions of this VideoInsights.  # noqa: E501
        :type: list[EmotionInsight]
        """

        self._emotions = emotions

    @property
    def faces(self):
        """Gets the faces of this VideoInsights.  # noqa: E501


        :return: The faces of this VideoInsights.  # noqa: E501
        :rtype: list[FaceInsight]
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this VideoInsights.


        :param faces: The faces of this VideoInsights.  # noqa: E501
        :type: list[FaceInsight]
        """

        self._faces = faces

    @property
    def frame_patterns(self):
        """Gets the frame_patterns of this VideoInsights.  # noqa: E501


        :return: The frame_patterns of this VideoInsights.  # noqa: E501
        :rtype: list[FramePatternInsight]
        """
        return self._frame_patterns

    @frame_patterns.setter
    def frame_patterns(self, frame_patterns):
        """Sets the frame_patterns of this VideoInsights.


        :param frame_patterns: The frame_patterns of this VideoInsights.  # noqa: E501
        :type: list[FramePatternInsight]
        """

        self._frame_patterns = frame_patterns

    @property
    def keywords(self):
        """Gets the keywords of this VideoInsights.  # noqa: E501


        :return: The keywords of this VideoInsights.  # noqa: E501
        :rtype: list[KeywordInsight]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this VideoInsights.


        :param keywords: The keywords of this VideoInsights.  # noqa: E501
        :type: list[KeywordInsight]
        """

        self._keywords = keywords

    @property
    def labels(self):
        """Gets the labels of this VideoInsights.  # noqa: E501


        :return: The labels of this VideoInsights.  # noqa: E501
        :rtype: list[LabelInsight]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VideoInsights.


        :param labels: The labels of this VideoInsights.  # noqa: E501
        :type: list[LabelInsight]
        """

        self._labels = labels

    @property
    def language(self):
        """Gets the language of this VideoInsights.  # noqa: E501


        :return: The language of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VideoInsights.


        :param language: The language of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsLanguage
        """

        self._language = language

    @property
    def languages(self):
        """Gets the languages of this VideoInsights.  # noqa: E501


        :return: The languages of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsLanguages
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this VideoInsights.


        :param languages: The languages of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsLanguages
        """

        self._languages = languages

    @property
    def named_locations(self):
        """Gets the named_locations of this VideoInsights.  # noqa: E501


        :return: The named_locations of this VideoInsights.  # noqa: E501
        :rtype: list[NamedLocation]
        """
        return self._named_locations

    @named_locations.setter
    def named_locations(self, named_locations):
        """Sets the named_locations of this VideoInsights.


        :param named_locations: The named_locations of this VideoInsights.  # noqa: E501
        :type: list[NamedLocation]
        """

        self._named_locations = named_locations

    @property
    def named_people(self):
        """Gets the named_people of this VideoInsights.  # noqa: E501


        :return: The named_people of this VideoInsights.  # noqa: E501
        :rtype: list[NamedPerson]
        """
        return self._named_people

    @named_people.setter
    def named_people(self, named_people):
        """Sets the named_people of this VideoInsights.


        :param named_people: The named_people of this VideoInsights.  # noqa: E501
        :type: list[NamedPerson]
        """

        self._named_people = named_people

    @property
    def observed_people(self):
        """Gets the observed_people of this VideoInsights.  # noqa: E501


        :return: The observed_people of this VideoInsights.  # noqa: E501
        :rtype: list[ObservedPersonInsight]
        """
        return self._observed_people

    @observed_people.setter
    def observed_people(self, observed_people):
        """Sets the observed_people of this VideoInsights.


        :param observed_people: The observed_people of this VideoInsights.  # noqa: E501
        :type: list[ObservedPersonInsight]
        """

        self._observed_people = observed_people

    @property
    def ocr(self):
        """Gets the ocr of this VideoInsights.  # noqa: E501


        :return: The ocr of this VideoInsights.  # noqa: E501
        :rtype: list[OcrInsight]
        """
        return self._ocr

    @ocr.setter
    def ocr(self, ocr):
        """Sets the ocr of this VideoInsights.


        :param ocr: The ocr of this VideoInsights.  # noqa: E501
        :type: list[OcrInsight]
        """

        self._ocr = ocr

    @property
    def scenes(self):
        """Gets the scenes of this VideoInsights.  # noqa: E501


        :return: The scenes of this VideoInsights.  # noqa: E501
        :rtype: list[SceneInsight]
        """
        return self._scenes

    @scenes.setter
    def scenes(self, scenes):
        """Sets the scenes of this VideoInsights.


        :param scenes: The scenes of this VideoInsights.  # noqa: E501
        :type: list[SceneInsight]
        """

        self._scenes = scenes

    @property
    def sentiments(self):
        """Gets the sentiments of this VideoInsights.  # noqa: E501


        :return: The sentiments of this VideoInsights.  # noqa: E501
        :rtype: list[SentimentInsight]
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this VideoInsights.


        :param sentiments: The sentiments of this VideoInsights.  # noqa: E501
        :type: list[SentimentInsight]
        """

        self._sentiments = sentiments

    @property
    def shots(self):
        """Gets the shots of this VideoInsights.  # noqa: E501


        :return: The shots of this VideoInsights.  # noqa: E501
        :rtype: list[ShotInsight]
        """
        return self._shots

    @shots.setter
    def shots(self, shots):
        """Sets the shots of this VideoInsights.


        :param shots: The shots of this VideoInsights.  # noqa: E501
        :type: list[ShotInsight]
        """

        self._shots = shots

    @property
    def source_language(self):
        """Gets the source_language of this VideoInsights.  # noqa: E501


        :return: The source_language of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsSourceLanguage
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this VideoInsights.


        :param source_language: The source_language of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsSourceLanguage
        """

        self._source_language = source_language

    @property
    def source_language_confidence(self):
        """Gets the source_language_confidence of this VideoInsights.  # noqa: E501


        :return: The source_language_confidence of this VideoInsights.  # noqa: E501
        :rtype: float
        """
        return self._source_language_confidence

    @source_language_confidence.setter
    def source_language_confidence(self, source_language_confidence):
        """Sets the source_language_confidence of this VideoInsights.


        :param source_language_confidence: The source_language_confidence of this VideoInsights.  # noqa: E501
        :type: float
        """

        self._source_language_confidence = source_language_confidence

    @property
    def source_languages(self):
        """Gets the source_languages of this VideoInsights.  # noqa: E501


        :return: The source_languages of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsSourceLanguages
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this VideoInsights.


        :param source_languages: The source_languages of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsSourceLanguages
        """

        self._source_languages = source_languages

    @property
    def speakers(self):
        """Gets the speakers of this VideoInsights.  # noqa: E501


        :return: The speakers of this VideoInsights.  # noqa: E501
        :rtype: list[SpeakerInsight]
        """
        return self._speakers

    @speakers.setter
    def speakers(self, speakers):
        """Sets the speakers of this VideoInsights.


        :param speakers: The speakers of this VideoInsights.  # noqa: E501
        :type: list[SpeakerInsight]
        """

        self._speakers = speakers

    @property
    def statistics(self):
        """Gets the statistics of this VideoInsights.  # noqa: E501


        :return: The statistics of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this VideoInsights.


        :param statistics: The statistics of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsStatistics
        """

        self._statistics = statistics

    @property
    def textual_content_moderation(self):
        """Gets the textual_content_moderation of this VideoInsights.  # noqa: E501


        :return: The textual_content_moderation of this VideoInsights.  # noqa: E501
        :rtype: OneOfVideoInsightsTextualContentModeration
        """
        return self._textual_content_moderation

    @textual_content_moderation.setter
    def textual_content_moderation(self, textual_content_moderation):
        """Sets the textual_content_moderation of this VideoInsights.


        :param textual_content_moderation: The textual_content_moderation of this VideoInsights.  # noqa: E501
        :type: OneOfVideoInsightsTextualContentModeration
        """

        self._textual_content_moderation = textual_content_moderation

    @property
    def topics(self):
        """Gets the topics of this VideoInsights.  # noqa: E501


        :return: The topics of this VideoInsights.  # noqa: E501
        :rtype: list[TopicInsight]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this VideoInsights.


        :param topics: The topics of this VideoInsights.  # noqa: E501
        :type: list[TopicInsight]
        """

        self._topics = topics

    @property
    def transcript(self):
        """Gets the transcript of this VideoInsights.  # noqa: E501


        :return: The transcript of this VideoInsights.  # noqa: E501
        :rtype: list[TranscriptLineInsight]
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this VideoInsights.


        :param transcript: The transcript of this VideoInsights.  # noqa: E501
        :type: list[TranscriptLineInsight]
        """

        self._transcript = transcript

    @property
    def version(self):
        """Gets the version of this VideoInsights.  # noqa: E501


        :return: The version of this VideoInsights.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VideoInsights.


        :param version: The version of this VideoInsights.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def visual_content_moderation(self):
        """Gets the visual_content_moderation of this VideoInsights.  # noqa: E501


        :return: The visual_content_moderation of this VideoInsights.  # noqa: E501
        :rtype: list[VisualContentModerationInsight]
        """
        return self._visual_content_moderation

    @visual_content_moderation.setter
    def visual_content_moderation(self, visual_content_moderation):
        """Sets the visual_content_moderation of this VideoInsights.


        :param visual_content_moderation: The visual_content_moderation of this VideoInsights.  # noqa: E501
        :type: list[VisualContentModerationInsight]
        """

        self._visual_content_moderation = visual_content_moderation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoInsights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoInsights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
