# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'account_type': 'str',
        'ams_aad_connection_application_id': 'str',
        'ams_resource': 'str',
        'c_name': 'str',
        'contributors': 'list[AccountUser]',
        'create_time': 'datetime',
        'description': 'str',
        'id': 'str',
        'invited_contributors': 'list[str]',
        'invited_readers': 'list[str]',
        'is_arm_only': 'bool',
        'is_in_move_to_arm': 'bool',
        'is_paid': 'bool',
        'limited_access_features': 'OneOfAccountLimitedAccessFeatures',
        'location': 'str',
        'media_services': 'OneOfAccountMediaServices',
        'move_to_arm_started_date': 'datetime',
        'name': 'str',
        'owners': 'list[AccountUser]',
        'quota_usage': 'OneOfAccountQuotaUsage',
        'readers': 'list[AccountUser]',
        'state': 'AccountState',
        'statistics': 'OneOfAccountStatistics',
        'url': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'account_type': 'accountType',
        'ams_aad_connection_application_id': 'amsAadConnectionApplicationId',
        'ams_resource': 'amsResource',
        'c_name': 'cName',
        'contributors': 'contributors',
        'create_time': 'createTime',
        'description': 'description',
        'id': 'id',
        'invited_contributors': 'invitedContributors',
        'invited_readers': 'invitedReaders',
        'is_arm_only': 'isArmOnly',
        'is_in_move_to_arm': 'isInMoveToArm',
        'is_paid': 'isPaid',
        'limited_access_features': 'limitedAccessFeatures',
        'location': 'location',
        'media_services': 'mediaServices',
        'move_to_arm_started_date': 'moveToArmStartedDate',
        'name': 'name',
        'owners': 'owners',
        'quota_usage': 'quotaUsage',
        'readers': 'readers',
        'state': 'state',
        'statistics': 'statistics',
        'url': 'url'
    }

    def __init__(self, access_token=None, account_type=None, ams_aad_connection_application_id=None, ams_resource=None, c_name=None, contributors=None, create_time=None, description=None, id=None, invited_contributors=None, invited_readers=None, is_arm_only=None, is_in_move_to_arm=None, is_paid=None, limited_access_features=None, location=None, media_services=None, move_to_arm_started_date=None, name=None, owners=None, quota_usage=None, readers=None, state=None, statistics=None, url=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._account_type = None
        self._ams_aad_connection_application_id = None
        self._ams_resource = None
        self._c_name = None
        self._contributors = None
        self._create_time = None
        self._description = None
        self._id = None
        self._invited_contributors = None
        self._invited_readers = None
        self._is_arm_only = None
        self._is_in_move_to_arm = None
        self._is_paid = None
        self._limited_access_features = None
        self._location = None
        self._media_services = None
        self._move_to_arm_started_date = None
        self._name = None
        self._owners = None
        self._quota_usage = None
        self._readers = None
        self._state = None
        self._statistics = None
        self._url = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if account_type is not None:
            self.account_type = account_type
        if ams_aad_connection_application_id is not None:
            self.ams_aad_connection_application_id = ams_aad_connection_application_id
        if ams_resource is not None:
            self.ams_resource = ams_resource
        if c_name is not None:
            self.c_name = c_name
        if contributors is not None:
            self.contributors = contributors
        if create_time is not None:
            self.create_time = create_time
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if invited_contributors is not None:
            self.invited_contributors = invited_contributors
        if invited_readers is not None:
            self.invited_readers = invited_readers
        if is_arm_only is not None:
            self.is_arm_only = is_arm_only
        if is_in_move_to_arm is not None:
            self.is_in_move_to_arm = is_in_move_to_arm
        if is_paid is not None:
            self.is_paid = is_paid
        if limited_access_features is not None:
            self.limited_access_features = limited_access_features
        if location is not None:
            self.location = location
        if media_services is not None:
            self.media_services = media_services
        if move_to_arm_started_date is not None:
            self.move_to_arm_started_date = move_to_arm_started_date
        if name is not None:
            self.name = name
        if owners is not None:
            self.owners = owners
        if quota_usage is not None:
            self.quota_usage = quota_usage
        if readers is not None:
            self.readers = readers
        if state is not None:
            self.state = state
        if statistics is not None:
            self.statistics = statistics
        if url is not None:
            self.url = url

    @property
    def access_token(self):
        """Gets the access_token of this Account.  # noqa: E501


        :return: The access_token of this Account.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Account.


        :param access_token: The access_token of this Account.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def account_type(self):
        """Gets the account_type of this Account.  # noqa: E501


        :return: The account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.


        :param account_type: The account_type of this Account.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def ams_aad_connection_application_id(self):
        """Gets the ams_aad_connection_application_id of this Account.  # noqa: E501


        :return: The ams_aad_connection_application_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._ams_aad_connection_application_id

    @ams_aad_connection_application_id.setter
    def ams_aad_connection_application_id(self, ams_aad_connection_application_id):
        """Sets the ams_aad_connection_application_id of this Account.


        :param ams_aad_connection_application_id: The ams_aad_connection_application_id of this Account.  # noqa: E501
        :type: str
        """

        self._ams_aad_connection_application_id = ams_aad_connection_application_id

    @property
    def ams_resource(self):
        """Gets the ams_resource of this Account.  # noqa: E501


        :return: The ams_resource of this Account.  # noqa: E501
        :rtype: str
        """
        return self._ams_resource

    @ams_resource.setter
    def ams_resource(self, ams_resource):
        """Sets the ams_resource of this Account.


        :param ams_resource: The ams_resource of this Account.  # noqa: E501
        :type: str
        """

        self._ams_resource = ams_resource

    @property
    def c_name(self):
        """Gets the c_name of this Account.  # noqa: E501


        :return: The c_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._c_name

    @c_name.setter
    def c_name(self, c_name):
        """Sets the c_name of this Account.


        :param c_name: The c_name of this Account.  # noqa: E501
        :type: str
        """

        self._c_name = c_name

    @property
    def contributors(self):
        """Gets the contributors of this Account.  # noqa: E501


        :return: The contributors of this Account.  # noqa: E501
        :rtype: list[AccountUser]
        """
        return self._contributors

    @contributors.setter
    def contributors(self, contributors):
        """Sets the contributors of this Account.


        :param contributors: The contributors of this Account.  # noqa: E501
        :type: list[AccountUser]
        """

        self._contributors = contributors

    @property
    def create_time(self):
        """Gets the create_time of this Account.  # noqa: E501


        :return: The create_time of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Account.


        :param create_time: The create_time of this Account.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Account.  # noqa: E501


        :return: The description of this Account.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.


        :param description: The description of this Account.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invited_contributors(self):
        """Gets the invited_contributors of this Account.  # noqa: E501


        :return: The invited_contributors of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._invited_contributors

    @invited_contributors.setter
    def invited_contributors(self, invited_contributors):
        """Sets the invited_contributors of this Account.


        :param invited_contributors: The invited_contributors of this Account.  # noqa: E501
        :type: list[str]
        """

        self._invited_contributors = invited_contributors

    @property
    def invited_readers(self):
        """Gets the invited_readers of this Account.  # noqa: E501


        :return: The invited_readers of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._invited_readers

    @invited_readers.setter
    def invited_readers(self, invited_readers):
        """Sets the invited_readers of this Account.


        :param invited_readers: The invited_readers of this Account.  # noqa: E501
        :type: list[str]
        """

        self._invited_readers = invited_readers

    @property
    def is_arm_only(self):
        """Gets the is_arm_only of this Account.  # noqa: E501


        :return: The is_arm_only of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_arm_only

    @is_arm_only.setter
    def is_arm_only(self, is_arm_only):
        """Sets the is_arm_only of this Account.


        :param is_arm_only: The is_arm_only of this Account.  # noqa: E501
        :type: bool
        """

        self._is_arm_only = is_arm_only

    @property
    def is_in_move_to_arm(self):
        """Gets the is_in_move_to_arm of this Account.  # noqa: E501


        :return: The is_in_move_to_arm of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_move_to_arm

    @is_in_move_to_arm.setter
    def is_in_move_to_arm(self, is_in_move_to_arm):
        """Sets the is_in_move_to_arm of this Account.


        :param is_in_move_to_arm: The is_in_move_to_arm of this Account.  # noqa: E501
        :type: bool
        """

        self._is_in_move_to_arm = is_in_move_to_arm

    @property
    def is_paid(self):
        """Gets the is_paid of this Account.  # noqa: E501


        :return: The is_paid of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this Account.


        :param is_paid: The is_paid of this Account.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def limited_access_features(self):
        """Gets the limited_access_features of this Account.  # noqa: E501


        :return: The limited_access_features of this Account.  # noqa: E501
        :rtype: OneOfAccountLimitedAccessFeatures
        """
        return self._limited_access_features

    @limited_access_features.setter
    def limited_access_features(self, limited_access_features):
        """Sets the limited_access_features of this Account.


        :param limited_access_features: The limited_access_features of this Account.  # noqa: E501
        :type: OneOfAccountLimitedAccessFeatures
        """

        self._limited_access_features = limited_access_features

    @property
    def location(self):
        """Gets the location of this Account.  # noqa: E501


        :return: The location of this Account.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Account.


        :param location: The location of this Account.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def media_services(self):
        """Gets the media_services of this Account.  # noqa: E501


        :return: The media_services of this Account.  # noqa: E501
        :rtype: OneOfAccountMediaServices
        """
        return self._media_services

    @media_services.setter
    def media_services(self, media_services):
        """Sets the media_services of this Account.


        :param media_services: The media_services of this Account.  # noqa: E501
        :type: OneOfAccountMediaServices
        """

        self._media_services = media_services

    @property
    def move_to_arm_started_date(self):
        """Gets the move_to_arm_started_date of this Account.  # noqa: E501


        :return: The move_to_arm_started_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._move_to_arm_started_date

    @move_to_arm_started_date.setter
    def move_to_arm_started_date(self, move_to_arm_started_date):
        """Sets the move_to_arm_started_date of this Account.


        :param move_to_arm_started_date: The move_to_arm_started_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._move_to_arm_started_date = move_to_arm_started_date

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owners(self):
        """Gets the owners of this Account.  # noqa: E501


        :return: The owners of this Account.  # noqa: E501
        :rtype: list[AccountUser]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Account.


        :param owners: The owners of this Account.  # noqa: E501
        :type: list[AccountUser]
        """

        self._owners = owners

    @property
    def quota_usage(self):
        """Gets the quota_usage of this Account.  # noqa: E501


        :return: The quota_usage of this Account.  # noqa: E501
        :rtype: OneOfAccountQuotaUsage
        """
        return self._quota_usage

    @quota_usage.setter
    def quota_usage(self, quota_usage):
        """Sets the quota_usage of this Account.


        :param quota_usage: The quota_usage of this Account.  # noqa: E501
        :type: OneOfAccountQuotaUsage
        """

        self._quota_usage = quota_usage

    @property
    def readers(self):
        """Gets the readers of this Account.  # noqa: E501


        :return: The readers of this Account.  # noqa: E501
        :rtype: list[AccountUser]
        """
        return self._readers

    @readers.setter
    def readers(self, readers):
        """Sets the readers of this Account.


        :param readers: The readers of this Account.  # noqa: E501
        :type: list[AccountUser]
        """

        self._readers = readers

    @property
    def state(self):
        """Gets the state of this Account.  # noqa: E501


        :return: The state of this Account.  # noqa: E501
        :rtype: AccountState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.


        :param state: The state of this Account.  # noqa: E501
        :type: AccountState
        """

        self._state = state

    @property
    def statistics(self):
        """Gets the statistics of this Account.  # noqa: E501


        :return: The statistics of this Account.  # noqa: E501
        :rtype: OneOfAccountStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Account.


        :param statistics: The statistics of this Account.  # noqa: E501
        :type: OneOfAccountStatistics
        """

        self._statistics = statistics

    @property
    def url(self):
        """Gets the url of this Account.  # noqa: E501


        :return: The url of this Account.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Account.


        :param url: The url of this Account.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
