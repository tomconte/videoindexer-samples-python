# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoLanguage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dominant_language': 'OneOfVideoLanguageDominantLanguage',
        'is_multiple_languages': 'bool',
        'is_single_language': 'bool',
        'languages': 'list[SingleLanguage]'
    }

    attribute_map = {
        'dominant_language': 'dominantLanguage',
        'is_multiple_languages': 'isMultipleLanguages',
        'is_single_language': 'isSingleLanguage',
        'languages': 'languages'
    }

    def __init__(self, dominant_language=None, is_multiple_languages=None, is_single_language=None, languages=None):  # noqa: E501
        """VideoLanguage - a model defined in Swagger"""  # noqa: E501
        self._dominant_language = None
        self._is_multiple_languages = None
        self._is_single_language = None
        self._languages = None
        self.discriminator = None
        if dominant_language is not None:
            self.dominant_language = dominant_language
        if is_multiple_languages is not None:
            self.is_multiple_languages = is_multiple_languages
        if is_single_language is not None:
            self.is_single_language = is_single_language
        if languages is not None:
            self.languages = languages

    @property
    def dominant_language(self):
        """Gets the dominant_language of this VideoLanguage.  # noqa: E501


        :return: The dominant_language of this VideoLanguage.  # noqa: E501
        :rtype: OneOfVideoLanguageDominantLanguage
        """
        return self._dominant_language

    @dominant_language.setter
    def dominant_language(self, dominant_language):
        """Sets the dominant_language of this VideoLanguage.


        :param dominant_language: The dominant_language of this VideoLanguage.  # noqa: E501
        :type: OneOfVideoLanguageDominantLanguage
        """

        self._dominant_language = dominant_language

    @property
    def is_multiple_languages(self):
        """Gets the is_multiple_languages of this VideoLanguage.  # noqa: E501


        :return: The is_multiple_languages of this VideoLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._is_multiple_languages

    @is_multiple_languages.setter
    def is_multiple_languages(self, is_multiple_languages):
        """Sets the is_multiple_languages of this VideoLanguage.


        :param is_multiple_languages: The is_multiple_languages of this VideoLanguage.  # noqa: E501
        :type: bool
        """

        self._is_multiple_languages = is_multiple_languages

    @property
    def is_single_language(self):
        """Gets the is_single_language of this VideoLanguage.  # noqa: E501


        :return: The is_single_language of this VideoLanguage.  # noqa: E501
        :rtype: bool
        """
        return self._is_single_language

    @is_single_language.setter
    def is_single_language(self, is_single_language):
        """Sets the is_single_language of this VideoLanguage.


        :param is_single_language: The is_single_language of this VideoLanguage.  # noqa: E501
        :type: bool
        """

        self._is_single_language = is_single_language

    @property
    def languages(self):
        """Gets the languages of this VideoLanguage.  # noqa: E501


        :return: The languages of this VideoLanguage.  # noqa: E501
        :rtype: list[SingleLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this VideoLanguage.


        :param languages: The languages of this VideoLanguage.  # noqa: E501
        :type: list[SingleLanguage]
        """

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoLanguage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoLanguage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
