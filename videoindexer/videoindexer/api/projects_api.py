# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from videoindexer.api_client import ApiClient


class ProjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_project_render_operation(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Cancel Project Render Operation  # noqa: E501

        Cancels the ongoing render operation of an existing project. If the project's render operation's state isn't 'InProgress', the request won't do anything.<br/>If the render operation's state is 'InProgress' it will transition to state 'Cancelling' from which it usually reaches the 'Canceled' state but can reach another terminal state if the render operation already completed by the time cancellation was acknowledged. The API to get a project's render operation has documentation that explains possible render operation states in detail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_project_render_operation(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_project_render_operation_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_project_render_operation_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def cancel_project_render_operation_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Cancel Project Render Operation  # noqa: E501

        Cancels the ongoing render operation of an existing project. If the project's render operation's state isn't 'InProgress', the request won't do anything.<br/>If the render operation's state is 'InProgress' it will transition to state 'Cancelling' from which it usually reaches the 'Canceled' state but can reach another terminal state if the render operation already completed by the time cancellation was acknowledged. The API to get a project's render operation has documentation that explains possible render operation states in detail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_project_render_operation_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_project_render_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `cancel_project_render_operation`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `cancel_project_render_operation`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `cancel_project_render_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/renderoperation/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_project(self, location, account_id, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        Creates a new project. Projects can be empty, e.g. a not have video ranges, but such projects can't be rendered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param object body: The request body consists of the video ranges that make the project and the project name
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_project_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_project_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def create_project_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        Creates a new project. Projects can be empty, e.g. a not have video ranges, but such projects can't be rendered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param object body: The request body consists of the video ranges that make the project and the project name
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'body', 'x_ms_client_request_id', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `create_project`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_project(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Delete Project  # noqa: E501

        Deletes an existing project. If the project is rendered the rendered media file will be deleted as well.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_project_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Delete Project  # noqa: E501

        Deletes an existing project. If the project is rendered the rendered media file will be deleted as well.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `delete_project`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_project`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_project_rendered_file_url(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Download Project Rendered File Url  # noqa: E501

        Gets a download url for the media file of an existing project that is rendered. Can be used to download the rendered media file, and also to index it as a new independent video by using the API to upload a video from URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_project_rendered_file_url(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_project_rendered_file_url_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_project_rendered_file_url_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def download_project_rendered_file_url_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Download Project Rendered File Url  # noqa: E501

        Gets a download url for the media file of an existing project that is rendered. Can be used to download the rendered media file, and also to index it as a new independent video by using the API to upload a video from URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_project_rendered_file_url_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_project_rendered_file_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `download_project_rendered_file_url`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `download_project_rendered_file_url`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `download_project_rendered_file_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/renderedfile/downloadurl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_captions(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Captions  # noqa: E501

        Get project captions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_captions(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str index_id: The video id
        :param str format: The captions format. Allowed values: Vtt / Ttml / Srt / Txt / Csv
        :param str language: The language of the captions. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool include_audio_effects: Include audio effects
        :param bool include_speakers: Include speakers
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_captions_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_captions_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_captions_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Captions  # noqa: E501

        Get project captions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_captions_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str index_id: The video id
        :param str format: The captions format. Allowed values: Vtt / Ttml / Srt / Txt / Csv
        :param str language: The language of the captions. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool include_audio_effects: Include audio effects
        :param bool include_speakers: Include speakers
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'index_id', 'format', 'language', 'include_audio_effects', 'include_speakers', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_captions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_captions`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_captions`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_captions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'include_audio_effects' in params:
            query_params.append(('includeAudioEffects', params['include_audio_effects']))  # noqa: E501
        if 'include_speakers' in params:
            query_params.append(('includeSpeakers', params['include_speakers']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/Captions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_index(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Index  # noqa: E501

        Get an existing project's index, which includes indices of all project's source videos, and if the project is rendered then render info that enables streaming in a player is included in the response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_index(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str language: The language to translate video insights. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool re_translate: Indicates whether to re-translate the video insights and overwrite existing translation for the given language or leave existing translation.
        :param str included_insights: Insights to include in the response. For example, to include only Transcript and Faces in the insights, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will include all insights.
        :param str excluded_insights: Insights to exclude from the response. For example, to get all insights except Transcript and Faces, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will exclude no insight. This query parameter cannot be provided if the 'includeInsights' parameter is provided.
        :param bool include_summarized_insights: Whether to include the deprecated SummarizedInsights field. It is recommended to pass 'false'.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_index_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_index_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_index_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Index  # noqa: E501

        Get an existing project's index, which includes indices of all project's source videos, and if the project is rendered then render info that enables streaming in a player is included in the response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_index_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str language: The language to translate video insights. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool re_translate: Indicates whether to re-translate the video insights and overwrite existing translation for the given language or leave existing translation.
        :param str included_insights: Insights to include in the response. For example, to include only Transcript and Faces in the insights, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will include all insights.
        :param str excluded_insights: Insights to exclude from the response. For example, to get all insights except Transcript and Faces, pass the value 'Transcript,Faces'. Only array fields under the insights element are supported. An empty value will exclude no insight. This query parameter cannot be provided if the 'includeInsights' parameter is provided.
        :param bool include_summarized_insights: Whether to include the deprecated SummarizedInsights field. It is recommended to pass 'false'.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'language', 're_translate', 'included_insights', 'excluded_insights', 'include_summarized_insights', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_index`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_index`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 're_translate' in params:
            query_params.append(('reTranslate', params['re_translate']))  # noqa: E501
        if 'included_insights' in params:
            query_params.append(('includedInsights', params['included_insights']))  # noqa: E501
        if 'excluded_insights' in params:
            query_params.append(('excludedInsights', params['excluded_insights']))  # noqa: E501
        if 'include_summarized_insights' in params:
            query_params.append(('includeSummarizedInsights', params['include_summarized_insights']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/Index', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_insights_widget(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Insights Widget  # noqa: E501

        Get Project Insights Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_insights_widget(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param list widget_type: The type of widgets to include. Allowed values: People / Sentiments / Keywords / Search
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_insights_widget_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_insights_widget_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_insights_widget_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Insights Widget  # noqa: E501

        Get Project Insights Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_insights_widget_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param list widget_type: The type of widgets to include. Allowed values: People / Sentiments / Keywords / Search
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'widget_type', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_insights_widget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_insights_widget`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_insights_widget`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_insights_widget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'widget_type' in params:
            query_params.append(('widgetType', params['widget_type']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/InsightsWidget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_player_widget(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Player Widget  # noqa: E501

        Get Project Player Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_player_widget(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_player_widget_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_player_widget_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_player_widget_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Player Widget  # noqa: E501

        Get Project Player Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_player_widget_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_player_widget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_player_widget`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_player_widget`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_player_widget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/PlayerWidget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_render_operation(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Render Operation  # noqa: E501

        Gets the render operation of an existing project that was requested to render. Meant to be used to check the status of an ongoing render operation following a successful request to render a project. A render operation can be in one of the following states: InProgress/Cancelling/Succeeded/Failed/Canceled:<br/>The state 'InProgress' is a non-terminal state that means the render operation is in progress, and cancellation can be requested using the cancellation API. While in this state, the project is render-locked, meaning until the render completes or cancellation is requested the project's video ranges can't be updated and it's not allowed to request render.<br/>The state 'Cancelling' is a non-terminal state that means that cancellation was requested for the render operation but it hasn't completed yet. In this state the project is no longer render-locked, so its video ranges can be updated and it's allowed to request render. From this state the project doesn't necessarily transition to the 'Canceled' state, since it's possible render already completed by the time the cancellation request was acknowledged.<br/>The state 'Canceled' is a terminal state that means that cancellation was requested for the render operation and the cancellation completed.<br/>The state 'Failed' is a terminal state that means that the render operation has completed with failure during processing. In that case the response body will contain error information.<br/>The state 'Succeeded' is a terminal state that means that the render operation has completed successfully. In that case the response body will contain the operation's result. A project is referred to as a rendered project if it has a render operation in this state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_render_operation(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_render_operation_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_render_operation_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_render_operation_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Render Operation  # noqa: E501

        Gets the render operation of an existing project that was requested to render. Meant to be used to check the status of an ongoing render operation following a successful request to render a project. A render operation can be in one of the following states: InProgress/Cancelling/Succeeded/Failed/Canceled:<br/>The state 'InProgress' is a non-terminal state that means the render operation is in progress, and cancellation can be requested using the cancellation API. While in this state, the project is render-locked, meaning until the render completes or cancellation is requested the project's video ranges can't be updated and it's not allowed to request render.<br/>The state 'Cancelling' is a non-terminal state that means that cancellation was requested for the render operation but it hasn't completed yet. In this state the project is no longer render-locked, so its video ranges can be updated and it's allowed to request render. From this state the project doesn't necessarily transition to the 'Canceled' state, since it's possible render already completed by the time the cancellation request was acknowledged.<br/>The state 'Canceled' is a terminal state that means that cancellation was requested for the render operation and the cancellation completed.<br/>The state 'Failed' is a terminal state that means that the render operation has completed with failure during processing. In that case the response body will contain error information.<br/>The state 'Succeeded' is a terminal state that means that the render operation has completed successfully. In that case the response body will contain the operation's result. A project is referred to as a rendered project if it has a render operation in this state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_render_operation_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_render_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_render_operation`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_render_operation`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_render_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/renderoperation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_thumbnail(self, location, account_id, project_id, thumbnail_id, **kwargs):  # noqa: E501
        """Get Project Thumbnail  # noqa: E501

        Get thumbnail of a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_thumbnail(location, account_id, project_id, thumbnail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str thumbnail_id: Format - guid. Thumbnail id (required)
        :param str format: Thumbnail format. Allowed values: Jpeg / Base64
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_thumbnail_with_http_info(location, account_id, project_id, thumbnail_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_thumbnail_with_http_info(location, account_id, project_id, thumbnail_id, **kwargs)  # noqa: E501
            return data

    def get_project_thumbnail_with_http_info(self, location, account_id, project_id, thumbnail_id, **kwargs):  # noqa: E501
        """Get Project Thumbnail  # noqa: E501

        Get thumbnail of a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_thumbnail_with_http_info(location, account_id, project_id, thumbnail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param str thumbnail_id: Format - guid. Thumbnail id (required)
        :param str format: Thumbnail format. Allowed values: Jpeg / Base64
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'thumbnail_id', 'format', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_thumbnail`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_thumbnail`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_thumbnail`")  # noqa: E501
        # verify the required parameter 'thumbnail_id' is set
        if ('thumbnail_id' not in params or
                params['thumbnail_id'] is None):
            raise ValueError("Missing the required parameter `thumbnail_id` when calling `get_project_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'thumbnail_id' in params:
            path_params['thumbnailId'] = params['thumbnail_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/Thumbnails/{thumbnailId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def render_project(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Render Project  # noqa: E501

        Renders a media file for an existing project. If the project is already rendered the response body will include the last render operation result, otherwise an asynchronous render operation will start and a 202 Accepted response will be returned and then you can poll for the operation's status by using the API to get a project's render operation.<br/>A project can have a single ongoing render operation at a time, therefore requesting a project render is not allowed if there's already an ongoing render operation. Additionally, while a project is ongoing rendering it's not allowed to update its video ranges, you can use the cancellation API to cancel an ongoing render operation in order to be allowed to update the project's video ranges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_project(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param bool send_completion_email: An indication whether to send a mail when the render operation completes, whether it completed successfully or with failure or it was canceled.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.render_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.render_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def render_project_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Render Project  # noqa: E501

        Renders a media file for an existing project. If the project is already rendered the response body will include the last render operation result, otherwise an asynchronous render operation will start and a 202 Accepted response will be returned and then you can poll for the operation's status by using the API to get a project's render operation.<br/>A project can have a single ongoing render operation at a time, therefore requesting a project render is not allowed if there's already an ongoing render operation. Additionally, while a project is ongoing rendering it's not allowed to update its video ranges, you can use the cancellation API to cancel an ongoing render operation in order to be allowed to update the project's video ranges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.render_project_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param bool send_completion_email: An indication whether to send a mail when the render operation completes, whether it completed successfully or with failure or it was canceled.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'send_completion_email', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `render_project`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `render_project`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `render_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'send_completion_email' in params:
            query_params.append(('sendCompletionEmail', params['send_completion_email']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_project(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        Updates an existing project. If the project has an ongoing render operation, updating its video ranges isn't allowed; you can use the cancellation API to cancel the render operation so video ranges update is allowed.<br/>If the project's video ranges are updated, it resets any render information available for the project, which means it will no longer be possible to get the project's render operation, and if the project has a rendered media file it will be deleted and no longer be available for download.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param object body: The request body consists of the video ranges that make the project and the project name
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_project_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def update_project_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        Updates an existing project. If the project has an ongoing render operation, updating its video ranges isn't allowed; you can use the cancellation API to cancel the render operation so video ranges update is allowed.<br/>If the project's video ranges are updated, it resets any render information available for the project, which means it will no longer be possible to get the project's render operation, and if the project has a rendered media file it will be deleted and no longer be available for download.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param object body: The request body consists of the video ranges that make the project and the project name
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'body', 'x_ms_client_request_id', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `update_project`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_project`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Projects/{projectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
