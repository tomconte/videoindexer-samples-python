# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountSlim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'account_type': 'str',
        'id': 'str',
        'is_arm_only': 'bool',
        'is_in_move_to_arm': 'bool',
        'location': 'str',
        'move_to_arm_started_date': 'datetime',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'account_type': 'accountType',
        'id': 'id',
        'is_arm_only': 'isArmOnly',
        'is_in_move_to_arm': 'isInMoveToArm',
        'location': 'location',
        'move_to_arm_started_date': 'moveToArmStartedDate',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, access_token=None, account_type=None, id=None, is_arm_only=None, is_in_move_to_arm=None, location=None, move_to_arm_started_date=None, name=None, url=None):  # noqa: E501
        """AccountSlim - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._account_type = None
        self._id = None
        self._is_arm_only = None
        self._is_in_move_to_arm = None
        self._location = None
        self._move_to_arm_started_date = None
        self._name = None
        self._url = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if account_type is not None:
            self.account_type = account_type
        if id is not None:
            self.id = id
        if is_arm_only is not None:
            self.is_arm_only = is_arm_only
        if is_in_move_to_arm is not None:
            self.is_in_move_to_arm = is_in_move_to_arm
        if location is not None:
            self.location = location
        if move_to_arm_started_date is not None:
            self.move_to_arm_started_date = move_to_arm_started_date
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def access_token(self):
        """Gets the access_token of this AccountSlim.  # noqa: E501


        :return: The access_token of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccountSlim.


        :param access_token: The access_token of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def account_type(self):
        """Gets the account_type of this AccountSlim.  # noqa: E501


        :return: The account_type of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountSlim.


        :param account_type: The account_type of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def id(self):
        """Gets the id of this AccountSlim.  # noqa: E501


        :return: The id of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountSlim.


        :param id: The id of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_arm_only(self):
        """Gets the is_arm_only of this AccountSlim.  # noqa: E501


        :return: The is_arm_only of this AccountSlim.  # noqa: E501
        :rtype: bool
        """
        return self._is_arm_only

    @is_arm_only.setter
    def is_arm_only(self, is_arm_only):
        """Sets the is_arm_only of this AccountSlim.


        :param is_arm_only: The is_arm_only of this AccountSlim.  # noqa: E501
        :type: bool
        """

        self._is_arm_only = is_arm_only

    @property
    def is_in_move_to_arm(self):
        """Gets the is_in_move_to_arm of this AccountSlim.  # noqa: E501


        :return: The is_in_move_to_arm of this AccountSlim.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_move_to_arm

    @is_in_move_to_arm.setter
    def is_in_move_to_arm(self, is_in_move_to_arm):
        """Sets the is_in_move_to_arm of this AccountSlim.


        :param is_in_move_to_arm: The is_in_move_to_arm of this AccountSlim.  # noqa: E501
        :type: bool
        """

        self._is_in_move_to_arm = is_in_move_to_arm

    @property
    def location(self):
        """Gets the location of this AccountSlim.  # noqa: E501


        :return: The location of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AccountSlim.


        :param location: The location of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def move_to_arm_started_date(self):
        """Gets the move_to_arm_started_date of this AccountSlim.  # noqa: E501


        :return: The move_to_arm_started_date of this AccountSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._move_to_arm_started_date

    @move_to_arm_started_date.setter
    def move_to_arm_started_date(self, move_to_arm_started_date):
        """Sets the move_to_arm_started_date of this AccountSlim.


        :param move_to_arm_started_date: The move_to_arm_started_date of this AccountSlim.  # noqa: E501
        :type: datetime
        """

        self._move_to_arm_started_date = move_to_arm_started_date

    @property
    def name(self):
        """Gets the name of this AccountSlim.  # noqa: E501


        :return: The name of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountSlim.


        :param name: The name of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this AccountSlim.  # noqa: E501


        :return: The url of this AccountSlim.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AccountSlim.


        :param url: The url of this AccountSlim.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSlim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSlim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
