# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoSearchResultItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'animation_model_id': 'str',
        'created': 'datetime',
        'description': 'str',
        'duration_in_seconds': 'int',
        'external_id': 'str',
        'has_source_video_file': 'bool',
        'id': 'str',
        'indexing_preset': 'str',
        'is_base': 'bool',
        'is_owned': 'bool',
        'last_indexed': 'datetime',
        'last_modified': 'datetime',
        'metadata': 'str',
        'moderation_state': 'ModerationState',
        'name': 'str',
        'partition': 'str',
        'person_model_id': 'str',
        'privacy_mode': 'PrivacyMode',
        'processing_progress': 'str',
        'review_state': 'ReviewState',
        'search_matches': 'list[VideoSearchMatch]',
        'source_language': 'OneOfVideoSearchResultItemSourceLanguage',
        'source_languages': 'list[SingleLanguage]',
        'state': 'VideoState',
        'streaming_preset': 'str',
        'thumbnail_id': 'str',
        'thumbnail_video_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'animation_model_id': 'animationModelId',
        'created': 'created',
        'description': 'description',
        'duration_in_seconds': 'durationInSeconds',
        'external_id': 'externalId',
        'has_source_video_file': 'hasSourceVideoFile',
        'id': 'id',
        'indexing_preset': 'indexingPreset',
        'is_base': 'isBase',
        'is_owned': 'isOwned',
        'last_indexed': 'lastIndexed',
        'last_modified': 'lastModified',
        'metadata': 'metadata',
        'moderation_state': 'moderationState',
        'name': 'name',
        'partition': 'partition',
        'person_model_id': 'personModelId',
        'privacy_mode': 'privacyMode',
        'processing_progress': 'processingProgress',
        'review_state': 'reviewState',
        'search_matches': 'searchMatches',
        'source_language': 'sourceLanguage',
        'source_languages': 'sourceLanguages',
        'state': 'state',
        'streaming_preset': 'streamingPreset',
        'thumbnail_id': 'thumbnailId',
        'thumbnail_video_id': 'thumbnailVideoId',
        'user_name': 'userName'
    }

    def __init__(self, account_id=None, animation_model_id=None, created=None, description=None, duration_in_seconds=None, external_id=None, has_source_video_file=None, id=None, indexing_preset=None, is_base=None, is_owned=None, last_indexed=None, last_modified=None, metadata=None, moderation_state=None, name=None, partition=None, person_model_id=None, privacy_mode=None, processing_progress=None, review_state=None, search_matches=None, source_language=None, source_languages=None, state=None, streaming_preset=None, thumbnail_id=None, thumbnail_video_id=None, user_name=None):  # noqa: E501
        """VideoSearchResultItem - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._animation_model_id = None
        self._created = None
        self._description = None
        self._duration_in_seconds = None
        self._external_id = None
        self._has_source_video_file = None
        self._id = None
        self._indexing_preset = None
        self._is_base = None
        self._is_owned = None
        self._last_indexed = None
        self._last_modified = None
        self._metadata = None
        self._moderation_state = None
        self._name = None
        self._partition = None
        self._person_model_id = None
        self._privacy_mode = None
        self._processing_progress = None
        self._review_state = None
        self._search_matches = None
        self._source_language = None
        self._source_languages = None
        self._state = None
        self._streaming_preset = None
        self._thumbnail_id = None
        self._thumbnail_video_id = None
        self._user_name = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if animation_model_id is not None:
            self.animation_model_id = animation_model_id
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if duration_in_seconds is not None:
            self.duration_in_seconds = duration_in_seconds
        if external_id is not None:
            self.external_id = external_id
        if has_source_video_file is not None:
            self.has_source_video_file = has_source_video_file
        if id is not None:
            self.id = id
        if indexing_preset is not None:
            self.indexing_preset = indexing_preset
        if is_base is not None:
            self.is_base = is_base
        if is_owned is not None:
            self.is_owned = is_owned
        if last_indexed is not None:
            self.last_indexed = last_indexed
        if last_modified is not None:
            self.last_modified = last_modified
        if metadata is not None:
            self.metadata = metadata
        if moderation_state is not None:
            self.moderation_state = moderation_state
        if name is not None:
            self.name = name
        if partition is not None:
            self.partition = partition
        if person_model_id is not None:
            self.person_model_id = person_model_id
        if privacy_mode is not None:
            self.privacy_mode = privacy_mode
        if processing_progress is not None:
            self.processing_progress = processing_progress
        if review_state is not None:
            self.review_state = review_state
        if search_matches is not None:
            self.search_matches = search_matches
        if source_language is not None:
            self.source_language = source_language
        if source_languages is not None:
            self.source_languages = source_languages
        if state is not None:
            self.state = state
        if streaming_preset is not None:
            self.streaming_preset = streaming_preset
        if thumbnail_id is not None:
            self.thumbnail_id = thumbnail_id
        if thumbnail_video_id is not None:
            self.thumbnail_video_id = thumbnail_video_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def account_id(self):
        """Gets the account_id of this VideoSearchResultItem.  # noqa: E501


        :return: The account_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VideoSearchResultItem.


        :param account_id: The account_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def animation_model_id(self):
        """Gets the animation_model_id of this VideoSearchResultItem.  # noqa: E501


        :return: The animation_model_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._animation_model_id

    @animation_model_id.setter
    def animation_model_id(self, animation_model_id):
        """Sets the animation_model_id of this VideoSearchResultItem.


        :param animation_model_id: The animation_model_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._animation_model_id = animation_model_id

    @property
    def created(self):
        """Gets the created of this VideoSearchResultItem.  # noqa: E501


        :return: The created of this VideoSearchResultItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VideoSearchResultItem.


        :param created: The created of this VideoSearchResultItem.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this VideoSearchResultItem.  # noqa: E501


        :return: The description of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoSearchResultItem.


        :param description: The description of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this VideoSearchResultItem.  # noqa: E501


        :return: The duration_in_seconds of this VideoSearchResultItem.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this VideoSearchResultItem.


        :param duration_in_seconds: The duration_in_seconds of this VideoSearchResultItem.  # noqa: E501
        :type: int
        """

        self._duration_in_seconds = duration_in_seconds

    @property
    def external_id(self):
        """Gets the external_id of this VideoSearchResultItem.  # noqa: E501


        :return: The external_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VideoSearchResultItem.


        :param external_id: The external_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def has_source_video_file(self):
        """Gets the has_source_video_file of this VideoSearchResultItem.  # noqa: E501


        :return: The has_source_video_file of this VideoSearchResultItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_source_video_file

    @has_source_video_file.setter
    def has_source_video_file(self, has_source_video_file):
        """Sets the has_source_video_file of this VideoSearchResultItem.


        :param has_source_video_file: The has_source_video_file of this VideoSearchResultItem.  # noqa: E501
        :type: bool
        """

        self._has_source_video_file = has_source_video_file

    @property
    def id(self):
        """Gets the id of this VideoSearchResultItem.  # noqa: E501


        :return: The id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoSearchResultItem.


        :param id: The id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def indexing_preset(self):
        """Gets the indexing_preset of this VideoSearchResultItem.  # noqa: E501


        :return: The indexing_preset of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._indexing_preset

    @indexing_preset.setter
    def indexing_preset(self, indexing_preset):
        """Sets the indexing_preset of this VideoSearchResultItem.


        :param indexing_preset: The indexing_preset of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._indexing_preset = indexing_preset

    @property
    def is_base(self):
        """Gets the is_base of this VideoSearchResultItem.  # noqa: E501


        :return: The is_base of this VideoSearchResultItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_base

    @is_base.setter
    def is_base(self, is_base):
        """Sets the is_base of this VideoSearchResultItem.


        :param is_base: The is_base of this VideoSearchResultItem.  # noqa: E501
        :type: bool
        """

        self._is_base = is_base

    @property
    def is_owned(self):
        """Gets the is_owned of this VideoSearchResultItem.  # noqa: E501


        :return: The is_owned of this VideoSearchResultItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this VideoSearchResultItem.


        :param is_owned: The is_owned of this VideoSearchResultItem.  # noqa: E501
        :type: bool
        """

        self._is_owned = is_owned

    @property
    def last_indexed(self):
        """Gets the last_indexed of this VideoSearchResultItem.  # noqa: E501


        :return: The last_indexed of this VideoSearchResultItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_indexed

    @last_indexed.setter
    def last_indexed(self, last_indexed):
        """Sets the last_indexed of this VideoSearchResultItem.


        :param last_indexed: The last_indexed of this VideoSearchResultItem.  # noqa: E501
        :type: datetime
        """

        self._last_indexed = last_indexed

    @property
    def last_modified(self):
        """Gets the last_modified of this VideoSearchResultItem.  # noqa: E501


        :return: The last_modified of this VideoSearchResultItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this VideoSearchResultItem.


        :param last_modified: The last_modified of this VideoSearchResultItem.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def metadata(self):
        """Gets the metadata of this VideoSearchResultItem.  # noqa: E501


        :return: The metadata of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VideoSearchResultItem.


        :param metadata: The metadata of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def moderation_state(self):
        """Gets the moderation_state of this VideoSearchResultItem.  # noqa: E501


        :return: The moderation_state of this VideoSearchResultItem.  # noqa: E501
        :rtype: ModerationState
        """
        return self._moderation_state

    @moderation_state.setter
    def moderation_state(self, moderation_state):
        """Sets the moderation_state of this VideoSearchResultItem.


        :param moderation_state: The moderation_state of this VideoSearchResultItem.  # noqa: E501
        :type: ModerationState
        """

        self._moderation_state = moderation_state

    @property
    def name(self):
        """Gets the name of this VideoSearchResultItem.  # noqa: E501


        :return: The name of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoSearchResultItem.


        :param name: The name of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partition(self):
        """Gets the partition of this VideoSearchResultItem.  # noqa: E501


        :return: The partition of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this VideoSearchResultItem.


        :param partition: The partition of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def person_model_id(self):
        """Gets the person_model_id of this VideoSearchResultItem.  # noqa: E501


        :return: The person_model_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._person_model_id

    @person_model_id.setter
    def person_model_id(self, person_model_id):
        """Sets the person_model_id of this VideoSearchResultItem.


        :param person_model_id: The person_model_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._person_model_id = person_model_id

    @property
    def privacy_mode(self):
        """Gets the privacy_mode of this VideoSearchResultItem.  # noqa: E501


        :return: The privacy_mode of this VideoSearchResultItem.  # noqa: E501
        :rtype: PrivacyMode
        """
        return self._privacy_mode

    @privacy_mode.setter
    def privacy_mode(self, privacy_mode):
        """Sets the privacy_mode of this VideoSearchResultItem.


        :param privacy_mode: The privacy_mode of this VideoSearchResultItem.  # noqa: E501
        :type: PrivacyMode
        """

        self._privacy_mode = privacy_mode

    @property
    def processing_progress(self):
        """Gets the processing_progress of this VideoSearchResultItem.  # noqa: E501


        :return: The processing_progress of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._processing_progress

    @processing_progress.setter
    def processing_progress(self, processing_progress):
        """Sets the processing_progress of this VideoSearchResultItem.


        :param processing_progress: The processing_progress of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._processing_progress = processing_progress

    @property
    def review_state(self):
        """Gets the review_state of this VideoSearchResultItem.  # noqa: E501


        :return: The review_state of this VideoSearchResultItem.  # noqa: E501
        :rtype: ReviewState
        """
        return self._review_state

    @review_state.setter
    def review_state(self, review_state):
        """Sets the review_state of this VideoSearchResultItem.


        :param review_state: The review_state of this VideoSearchResultItem.  # noqa: E501
        :type: ReviewState
        """

        self._review_state = review_state

    @property
    def search_matches(self):
        """Gets the search_matches of this VideoSearchResultItem.  # noqa: E501


        :return: The search_matches of this VideoSearchResultItem.  # noqa: E501
        :rtype: list[VideoSearchMatch]
        """
        return self._search_matches

    @search_matches.setter
    def search_matches(self, search_matches):
        """Sets the search_matches of this VideoSearchResultItem.


        :param search_matches: The search_matches of this VideoSearchResultItem.  # noqa: E501
        :type: list[VideoSearchMatch]
        """

        self._search_matches = search_matches

    @property
    def source_language(self):
        """Gets the source_language of this VideoSearchResultItem.  # noqa: E501


        :return: The source_language of this VideoSearchResultItem.  # noqa: E501
        :rtype: OneOfVideoSearchResultItemSourceLanguage
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this VideoSearchResultItem.


        :param source_language: The source_language of this VideoSearchResultItem.  # noqa: E501
        :type: OneOfVideoSearchResultItemSourceLanguage
        """

        self._source_language = source_language

    @property
    def source_languages(self):
        """Gets the source_languages of this VideoSearchResultItem.  # noqa: E501


        :return: The source_languages of this VideoSearchResultItem.  # noqa: E501
        :rtype: list[SingleLanguage]
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this VideoSearchResultItem.


        :param source_languages: The source_languages of this VideoSearchResultItem.  # noqa: E501
        :type: list[SingleLanguage]
        """

        self._source_languages = source_languages

    @property
    def state(self):
        """Gets the state of this VideoSearchResultItem.  # noqa: E501


        :return: The state of this VideoSearchResultItem.  # noqa: E501
        :rtype: VideoState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VideoSearchResultItem.


        :param state: The state of this VideoSearchResultItem.  # noqa: E501
        :type: VideoState
        """

        self._state = state

    @property
    def streaming_preset(self):
        """Gets the streaming_preset of this VideoSearchResultItem.  # noqa: E501


        :return: The streaming_preset of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._streaming_preset

    @streaming_preset.setter
    def streaming_preset(self, streaming_preset):
        """Sets the streaming_preset of this VideoSearchResultItem.


        :param streaming_preset: The streaming_preset of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._streaming_preset = streaming_preset

    @property
    def thumbnail_id(self):
        """Gets the thumbnail_id of this VideoSearchResultItem.  # noqa: E501


        :return: The thumbnail_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_id

    @thumbnail_id.setter
    def thumbnail_id(self, thumbnail_id):
        """Sets the thumbnail_id of this VideoSearchResultItem.


        :param thumbnail_id: The thumbnail_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._thumbnail_id = thumbnail_id

    @property
    def thumbnail_video_id(self):
        """Gets the thumbnail_video_id of this VideoSearchResultItem.  # noqa: E501


        :return: The thumbnail_video_id of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_video_id

    @thumbnail_video_id.setter
    def thumbnail_video_id(self, thumbnail_video_id):
        """Sets the thumbnail_video_id of this VideoSearchResultItem.


        :param thumbnail_video_id: The thumbnail_video_id of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._thumbnail_video_id = thumbnail_video_id

    @property
    def user_name(self):
        """Gets the user_name of this VideoSearchResultItem.  # noqa: E501


        :return: The user_name of this VideoSearchResultItem.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this VideoSearchResultItem.


        :param user_name: The user_name of this VideoSearchResultItem.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoSearchResultItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoSearchResultItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
