# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AmsConnectionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aad_connection': 'AccountMediaServicesAadConnectionContract',
        'aad_tenant_id': 'str',
        'account_encryption_key_contract': 'OneOfAmsConnectionInfoAccountEncryptionKeyContract',
        'location': 'str',
        'resource': 'str',
        'resource_group': 'str',
        'subscription_id': 'str'
    }

    attribute_map = {
        'aad_connection': 'aadConnection',
        'aad_tenant_id': 'aadTenantId',
        'account_encryption_key_contract': 'accountEncryptionKeyContract',
        'location': 'location',
        'resource': 'resource',
        'resource_group': 'resourceGroup',
        'subscription_id': 'subscriptionId'
    }

    def __init__(self, aad_connection=None, aad_tenant_id=None, account_encryption_key_contract=None, location=None, resource=None, resource_group=None, subscription_id=None):  # noqa: E501
        """AmsConnectionInfo - a model defined in Swagger"""  # noqa: E501
        self._aad_connection = None
        self._aad_tenant_id = None
        self._account_encryption_key_contract = None
        self._location = None
        self._resource = None
        self._resource_group = None
        self._subscription_id = None
        self.discriminator = None
        self.aad_connection = aad_connection
        self.aad_tenant_id = aad_tenant_id
        if account_encryption_key_contract is not None:
            self.account_encryption_key_contract = account_encryption_key_contract
        if location is not None:
            self.location = location
        self.resource = resource
        self.resource_group = resource_group
        self.subscription_id = subscription_id

    @property
    def aad_connection(self):
        """Gets the aad_connection of this AmsConnectionInfo.  # noqa: E501


        :return: The aad_connection of this AmsConnectionInfo.  # noqa: E501
        :rtype: AccountMediaServicesAadConnectionContract
        """
        return self._aad_connection

    @aad_connection.setter
    def aad_connection(self, aad_connection):
        """Sets the aad_connection of this AmsConnectionInfo.


        :param aad_connection: The aad_connection of this AmsConnectionInfo.  # noqa: E501
        :type: AccountMediaServicesAadConnectionContract
        """
        if aad_connection is None:
            raise ValueError("Invalid value for `aad_connection`, must not be `None`")  # noqa: E501

        self._aad_connection = aad_connection

    @property
    def aad_tenant_id(self):
        """Gets the aad_tenant_id of this AmsConnectionInfo.  # noqa: E501


        :return: The aad_tenant_id of this AmsConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._aad_tenant_id

    @aad_tenant_id.setter
    def aad_tenant_id(self, aad_tenant_id):
        """Sets the aad_tenant_id of this AmsConnectionInfo.


        :param aad_tenant_id: The aad_tenant_id of this AmsConnectionInfo.  # noqa: E501
        :type: str
        """
        if aad_tenant_id is None:
            raise ValueError("Invalid value for `aad_tenant_id`, must not be `None`")  # noqa: E501

        self._aad_tenant_id = aad_tenant_id

    @property
    def account_encryption_key_contract(self):
        """Gets the account_encryption_key_contract of this AmsConnectionInfo.  # noqa: E501


        :return: The account_encryption_key_contract of this AmsConnectionInfo.  # noqa: E501
        :rtype: OneOfAmsConnectionInfoAccountEncryptionKeyContract
        """
        return self._account_encryption_key_contract

    @account_encryption_key_contract.setter
    def account_encryption_key_contract(self, account_encryption_key_contract):
        """Sets the account_encryption_key_contract of this AmsConnectionInfo.


        :param account_encryption_key_contract: The account_encryption_key_contract of this AmsConnectionInfo.  # noqa: E501
        :type: OneOfAmsConnectionInfoAccountEncryptionKeyContract
        """

        self._account_encryption_key_contract = account_encryption_key_contract

    @property
    def location(self):
        """Gets the location of this AmsConnectionInfo.  # noqa: E501


        :return: The location of this AmsConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AmsConnectionInfo.


        :param location: The location of this AmsConnectionInfo.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def resource(self):
        """Gets the resource of this AmsConnectionInfo.  # noqa: E501


        :return: The resource of this AmsConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AmsConnectionInfo.


        :param resource: The resource of this AmsConnectionInfo.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def resource_group(self):
        """Gets the resource_group of this AmsConnectionInfo.  # noqa: E501


        :return: The resource_group of this AmsConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this AmsConnectionInfo.


        :param resource_group: The resource_group of this AmsConnectionInfo.  # noqa: E501
        :type: str
        """
        if resource_group is None:
            raise ValueError("Invalid value for `resource_group`, must not be `None`")  # noqa: E501

        self._resource_group = resource_group

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AmsConnectionInfo.  # noqa: E501


        :return: The subscription_id of this AmsConnectionInfo.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AmsConnectionInfo.


        :param subscription_id: The subscription_id of this AmsConnectionInfo.  # noqa: E501
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmsConnectionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmsConnectionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
