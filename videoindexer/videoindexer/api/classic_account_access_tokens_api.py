# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from videoindexer.api_client import ApiClient


class ClassicAccountAccessTokensApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_account_access_token(self, location, account_id, **kwargs):  # noqa: E501
        """Get Account Access Token  # noqa: E501

        Gets an account access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_access_token(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_access_token_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_access_token_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def get_account_access_token_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Get Account Access Token  # noqa: E501

        Gets an account access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_access_token_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'allow_edit', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_account_access_token`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Accounts/{accountId}/AccessToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_access_token_with_permission(self, location, account_id, **kwargs):  # noqa: E501
        """Get Account Access Token With Permission (PREVIEW)  # noqa: E501

        This API is a preview API subject to preview terms available <a href=\"https://aka.ms/vi-api-preview-terms\" target=\"_blank\">here</a>. Itâ€™s not final and might change.<br/>Gets an account access token with permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_access_token_with_permission(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str permission: The requested permission. Allowed values: Reader (allows reading content) / Contributor (allows modifying content) / MyAccessAdministrator (allows managing the acting user's permission) / Owner (allows managing permissions and modifying content)
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_access_token_with_permission_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_access_token_with_permission_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def get_account_access_token_with_permission_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Get Account Access Token With Permission (PREVIEW)  # noqa: E501

        This API is a preview API subject to preview terms available <a href=\"https://aka.ms/vi-api-preview-terms\" target=\"_blank\">here</a>. Itâ€™s not final and might change.<br/>Gets an account access token with permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_access_token_with_permission_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str permission: The requested permission. Allowed values: Reader (allows reading content) / Contributor (allows modifying content) / MyAccessAdministrator (allows managing the acting user's permission) / Owner (allows managing permissions and modifying content)
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'permission', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_access_token_with_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_account_access_token_with_permission`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_access_token_with_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'permission' in params:
            query_params.append(('permission', params['permission']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Accounts/{accountId}/AccessTokenWithPermission', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts_authorization(self, location, **kwargs):  # noqa: E501
        """Get Accounts Authorization  # noqa: E501

        Get Accounts, authentication by subscription key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_authorization(location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param bool generate_access_tokens: Whether to generate an access token for each account.
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_authorization_with_http_info(location, **kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_authorization_with_http_info(location, **kwargs)  # noqa: E501
            return data

    def get_accounts_authorization_with_http_info(self, location, **kwargs):  # noqa: E501
        """Get Accounts Authorization  # noqa: E501

        Get Accounts, authentication by subscription key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_authorization_with_http_info(location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param bool generate_access_tokens: Whether to generate an access token for each account.
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'generate_access_tokens', 'allow_edit', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_accounts_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501

        query_params = []
        if 'generate_access_tokens' in params:
            query_params.append(('generateAccessTokens', params['generate_access_tokens']))  # noqa: E501
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_access_token(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Access Token  # noqa: E501

        Gets a project access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_access_token(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write). When not specified, it will be determined by whether the current user has read-write permissions.
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_access_token_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_access_token_with_http_info(location, account_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_project_access_token_with_http_info(self, location, account_id, project_id, **kwargs):  # noqa: E501
        """Get Project Access Token  # noqa: E501

        Gets a project access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_access_token_with_http_info(location, account_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str project_id: The project id (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write). When not specified, it will be determined by whether the current user has read-write permissions.
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'project_id', 'allow_edit', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_project_access_token`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_project_access_token`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Accounts/{accountId}/Projects/{projectId}/AccessToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_access_token(self, location, **kwargs):  # noqa: E501
        """Get User Access Token  # noqa: E501

        Gets a user access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_access_token(location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_access_token_with_http_info(location, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_access_token_with_http_info(location, **kwargs)  # noqa: E501
            return data

    def get_user_access_token_with_http_info(self, location, **kwargs):  # noqa: E501
        """Get User Access Token  # noqa: E501

        Gets a user access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_access_token_with_http_info(location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write).
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'allow_edit', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_user_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501

        query_params = []
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Users/me/AccessToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_access_token(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Access Token  # noqa: E501

        Gets a video access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_access_token(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write). When not specified, it will be determined by whether the current user has read-write permissions.
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_access_token_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_access_token_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_access_token_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Access Token  # noqa: E501

        Gets a video access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_access_token_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param bool allow_edit: Determines the token's permission. 'false' is the equivalent of a Reader permission (read-only) and 'true' is the equivalent of a Contributor permission (read-write). When not specified, it will be determined by whether the current user has read-write permissions.
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'allow_edit', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_access_token`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_access_token`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Auth/{location}/Accounts/{accountId}/Videos/{videoId}/AccessToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
