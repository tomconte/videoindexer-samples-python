# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from videoindexer.api_client import ApiClient


class VideosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_video(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Delete Video  # noqa: E501

        Deletes the specified video and all related insights created from when the video was indexed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_video_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_video_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def delete_video_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Delete Video  # noqa: E501

        Deletes the specified video and all related insights created from when the video was indexed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `delete_video`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_video`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `delete_video`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_video_face(self, location, account_id, video_id, face_id, **kwargs):  # noqa: E501
        """Delete Video Face  # noqa: E501

        Delete Video Face.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video_face(location, account_id, video_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param int face_id: Format - int32. The face id to delete (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_video_face_with_http_info(location, account_id, video_id, face_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_video_face_with_http_info(location, account_id, video_id, face_id, **kwargs)  # noqa: E501
            return data

    def delete_video_face_with_http_info(self, location, account_id, video_id, face_id, **kwargs):  # noqa: E501
        """Delete Video Face  # noqa: E501

        Delete Video Face.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video_face_with_http_info(location, account_id, video_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param int face_id: Format - int32. The face id to delete (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'face_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_video_face" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `delete_video_face`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_video_face`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `delete_video_face`")  # noqa: E501
        # verify the required parameter 'face_id' is set
        if ('face_id' not in params or
                params['face_id'] is None):
            raise ValueError("Missing the required parameter `face_id` when calling `delete_video_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501
        if 'face_id' in params:
            path_params['faceId'] = params['face_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Index/Faces/{faceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_video_source_file(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Delete Video Source File  # noqa: E501

        Deletes only the video source file, while keeping all insights created from when the video was indexed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video_source_file(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_video_source_file_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_video_source_file_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def delete_video_source_file_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Delete Video Source File  # noqa: E501

        Deletes only the video source file, while keeping all insights created from when the video was indexed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_video_source_file_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_video_source_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `delete_video_source_file`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_video_source_file`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `delete_video_source_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/SourceFile', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_artifact_download_url(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Artifact Download Url  # noqa: E501

        Artifacts are intermediate outputs of the indexing process. They are essentially raw outputs of the various AI engines that analyze the videos. For this reason, the output formats may change over time. <br>We do not recommend that you use data directly from the artifacts folder for production purposes. It is recommended that you use the Get Video Index API for most insights. <br>This API returns a URL only with a link to the specific resource type you request. An additional GET request must be made to this URL for the specific artifact. <br>The file types for each artifact type vary depending on the artifact. For the specific schemas of the output JSON see <a href=https://docs.microsoft.com/en-us/azure/azure-video-indexer/video-indexer-output-json-v2 target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_artifact_download_url(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str type: The artifact type to get. Allowed values: Ocr / Faces / FacesThumbnails / VisualContentModeration / KeyframesThumbnails / Emotions / TextualContentModeration / AudioEffects / ObservedPeople / Labels / Transcript / FeaturedClothing / Clapperboards / DigitalPatterns
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_artifact_download_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_artifact_download_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_artifact_download_url_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Artifact Download Url  # noqa: E501

        Artifacts are intermediate outputs of the indexing process. They are essentially raw outputs of the various AI engines that analyze the videos. For this reason, the output formats may change over time. <br>We do not recommend that you use data directly from the artifacts folder for production purposes. It is recommended that you use the Get Video Index API for most insights. <br>This API returns a URL only with a link to the specific resource type you request. An additional GET request must be made to this URL for the specific artifact. <br>The file types for each artifact type vary depending on the artifact. For the specific schemas of the output JSON see <a href=https://docs.microsoft.com/en-us/azure/azure-video-indexer/video-indexer-output-json-v2 target=\"_blank\">here</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_artifact_download_url_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str type: The artifact type to get. Allowed values: Ocr / Faces / FacesThumbnails / VisualContentModeration / KeyframesThumbnails / Emotions / TextualContentModeration / AudioEffects / ObservedPeople / Labels / Transcript / FeaturedClothing / Clapperboards / DigitalPatterns
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'type', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_artifact_download_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_artifact_download_url`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_artifact_download_url`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_artifact_download_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/ArtifactUrl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_captions(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Captions  # noqa: E501

        Get video captions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_captions(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str index_id: The video id
        :param str format: The captions format. Allowed values: Vtt / Ttml / Srt / Txt / Csv
        :param str language: The language of the captions. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool include_audio_effects: Include audio effects
        :param bool include_speakers: Include speakers
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_captions_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_captions_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_captions_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Captions  # noqa: E501

        Get video captions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_captions_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str index_id: The video id
        :param str format: The captions format. Allowed values: Vtt / Ttml / Srt / Txt / Csv
        :param str language: The language of the captions. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool include_audio_effects: Include audio effects
        :param bool include_speakers: Include speakers
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'index_id', 'format', 'language', 'include_audio_effects', 'include_speakers', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_captions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_captions`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_captions`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_captions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'include_audio_effects' in params:
            query_params.append(('includeAudioEffects', params['include_audio_effects']))  # noqa: E501
        if 'include_speakers' in params:
            query_params.append(('includeSpeakers', params['include_speakers']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Captions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_id_by_external_id(self, location, account_id, **kwargs):  # noqa: E501
        """Get Video Id By External Id  # noqa: E501

        Get Video Id by External Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_id_by_external_id(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str external_id: The external id
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_id_by_external_id_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_id_by_external_id_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def get_video_id_by_external_id_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Get Video Id By External Id  # noqa: E501

        Get Video Id by External Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_id_by_external_id_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str external_id: The external id
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'external_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_id_by_external_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_id_by_external_id`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_id_by_external_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/GetIdByExternalId', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_source_file_download_url(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Source File Download Url  # noqa: E501

        Get video source file download url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_source_file_download_url(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_source_file_download_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_source_file_download_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_source_file_download_url_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Source File Download Url  # noqa: E501

        Get video source file download url.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_source_file_download_url_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_source_file_download_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_source_file_download_url`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_source_file_download_url`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_source_file_download_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/SourceFile/DownloadUrl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_streaming_url(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Streaming URL  # noqa: E501

        Get Video Streaming URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_streaming_url(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param bool use_proxy: Wrap the streaming endpoint with proxy. Required for delivering content to Safari browsers. See more details <a href=https://aka.ms/blog-hls-stream-working-in-safari/ />here</a>
        :param str url_format: <a href=https://aka.ms/vi-swagger-stream-url-formats />Streaming URL format</a>.. Allowed values: SMOOTH_STREAMING_FORMAT / MPEG_DASH / HLS_V4 / HLS_V3
        :param int token_lifetime_in_minutes: Format - int32. Streaming URL token lifetime in minutes. Value must be positive. Default is 60 minutes
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_streaming_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_streaming_url_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_streaming_url_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Streaming URL  # noqa: E501

        Get Video Streaming URL  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_streaming_url_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param bool use_proxy: Wrap the streaming endpoint with proxy. Required for delivering content to Safari browsers. See more details <a href=https://aka.ms/blog-hls-stream-working-in-safari/ />here</a>
        :param str url_format: <a href=https://aka.ms/vi-swagger-stream-url-formats />Streaming URL format</a>.. Allowed values: SMOOTH_STREAMING_FORMAT / MPEG_DASH / HLS_V4 / HLS_V3
        :param int token_lifetime_in_minutes: Format - int32. Streaming URL token lifetime in minutes. Value must be positive. Default is 60 minutes
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'use_proxy', 'url_format', 'token_lifetime_in_minutes', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_streaming_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_streaming_url`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_streaming_url`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_streaming_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'use_proxy' in params:
            query_params.append(('useProxy', params['use_proxy']))  # noqa: E501
        if 'url_format' in params:
            query_params.append(('urlFormat', params['url_format']))  # noqa: E501
        if 'token_lifetime_in_minutes' in params:
            query_params.append(('tokenLifetimeInMinutes', params['token_lifetime_in_minutes']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/streaming-url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_thumbnail(self, location, account_id, video_id, thumbnail_id, **kwargs):  # noqa: E501
        """Get Video Thumbnail  # noqa: E501

        Get thumbnail of a video  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_thumbnail(location, account_id, video_id, thumbnail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str thumbnail_id: Format - guid. Thumbnail id (required)
        :param str format: Thumbnail format. Allowed values: Jpeg / Base64
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_thumbnail_with_http_info(location, account_id, video_id, thumbnail_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_thumbnail_with_http_info(location, account_id, video_id, thumbnail_id, **kwargs)  # noqa: E501
            return data

    def get_video_thumbnail_with_http_info(self, location, account_id, video_id, thumbnail_id, **kwargs):  # noqa: E501
        """Get Video Thumbnail  # noqa: E501

        Get thumbnail of a video  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_thumbnail_with_http_info(location, account_id, video_id, thumbnail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str thumbnail_id: Format - guid. Thumbnail id (required)
        :param str format: Thumbnail format. Allowed values: Jpeg / Base64
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'thumbnail_id', 'format', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_thumbnail`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_thumbnail`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_thumbnail`")  # noqa: E501
        # verify the required parameter 'thumbnail_id' is set
        if ('thumbnail_id' not in params or
                params['thumbnail_id'] is None):
            raise ValueError("Missing the required parameter `thumbnail_id` when calling `get_video_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501
        if 'thumbnail_id' in params:
            path_params['thumbnailId'] = params['thumbnail_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Thumbnails/{thumbnailId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_videos(self, location, account_id, **kwargs):  # noqa: E501
        """List Videos  # noqa: E501

        Get a list of videos and projects in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_videos(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str created_after: Filter items created before the specified date. Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param str created_before: Filter items created after the specified date. Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param int page_size: Format - int32. page size
        :param int skip: Format - int32. The number of records to skip
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_videos_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_videos_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def list_videos_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """List Videos  # noqa: E501

        Get a list of videos and projects in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_videos_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str created_after: Filter items created before the specified date. Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param str created_before: Filter items created after the specified date. Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param int page_size: Format - int32. page size
        :param int skip: Format - int32. The number of records to skip
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'created_after', 'created_before', 'page_size', 'skip', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_videos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `list_videos`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_videos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'created_after' in params:
            query_params.append(('createdAfter', params['created_after']))  # noqa: E501
        if 'created_before' in params:
            query_params.append(('createdBefore', params['created_before']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_videos(self, location, account_id, **kwargs):  # noqa: E501
        """Search Videos  # noqa: E501

        Search videos and projects in the specified account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_videos(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str source_language: Include only videos/projects with that source language. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param bool is_base: true will include only videos; false will include only projects
        :param bool has_source_video_file: true will include videos that have a source file; false will include projects as well as videos without a source file
        :param str source_video_id: Include only the video with the given id as well as projects that have a source video with the given id
        :param list state: A processing state of videos. Projects are always in 'Processed' state. Allowed values: Uploaded / Processing / Processed / Failed / Quarantined
        :param list privacy: A privacy level. Allowed values: Private / Public
        :param list id: A video id to search for.
        :param list partition: A partition to search for.
        :param list external_id: An external id to search for (which was associated with the video at upload).
        :param list owner: An owner to search for.
        :param list face: A face to search for.
        :param list animatedcharacter: An animated character to search for.
        :param list query: Free text to search for.  Example 1: '&query=north america' -> searches for videos with 'north' and / or 'america' and ranks videos with more hits higher.   Example 2: '&query=north+america' -> search for videos with all of the words (AND operator).   Example 3: '&query=north|america' -> searches for videos with any of the words (OR operator).   Example 4: '&query=north&query=america' -> searches for videos with any of the words (OR operator).   Example 5: '&query=-north' -> searches for videos without the word 'north' (NOT operator).   Example 6: '&query=\"north america\"' -> searches for videos with the phrase 'north america' (exact match).   Example 7: '&query=\"north america\"'&query=-east -> searches for videos with the phrase 'north america' (exact match) OR videos without the word 'east'.   NOTICE: These parameters should be sent url-encoded. This is confusing because a space ' ' is encoded as '+' and '+' is encoded as '%2B'. Open text query like '&query=north america' is sent as '&query=north+america' and an AND query like '&query=north+america' is sent as '&query=north%2Bamerica'.
        :param list text_scope: The text scope to search in. Allowed values: Transcript / Topics / Ocr / Annotations / Brands / NamedLocations / NamedPeople
        :param list language: The language to search in. You can specify multiple language parameters (e.g. $language=English&language=French) to search multiple languages. Having no language parameter will search all languages. Videos/projects are searchable in their source language as well as any language they were translated to by another operation. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param str created_after: Filter items created before the specified date Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param str created_before: Filter items created after the specified date Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param int page_size: Format - int32. The number of results to return.
        :param int skip: Format - int32. The number of results to skip (used for paging).
        :param str access_token: Required for private videos/projects or account scope search. If searching an account, you must provide a token with an Account scope.<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_videos_with_http_info(location, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_videos_with_http_info(location, account_id, **kwargs)  # noqa: E501
            return data

    def search_videos_with_http_info(self, location, account_id, **kwargs):  # noqa: E501
        """Search Videos  # noqa: E501

        Search videos and projects in the specified account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_videos_with_http_info(location, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str source_language: Include only videos/projects with that source language. Supported languages: Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Czech: cs-CZ, Danish: da-DK, German: de-DE, English Australia: en-AU, English United Kingdom: en-GB, English United States: en-US, Spanish: es-ES, Spanish (Mexico): es-MX, Persian: fa-IR, Finnish: fi-FI, French (Canada): fr-CA, French: fr-FR, Hebrew: he-IL, Hindi: hi-IN, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Russian: ru-RU, Swedish: sv-SE, Thai: th-TH, Turkish: tr-TR, Chinese (Simplified): zh-Hans, Chinese (Cantonese, Traditional): zh-HK.
        :param bool is_base: true will include only videos; false will include only projects
        :param bool has_source_video_file: true will include videos that have a source file; false will include projects as well as videos without a source file
        :param str source_video_id: Include only the video with the given id as well as projects that have a source video with the given id
        :param list state: A processing state of videos. Projects are always in 'Processed' state. Allowed values: Uploaded / Processing / Processed / Failed / Quarantined
        :param list privacy: A privacy level. Allowed values: Private / Public
        :param list id: A video id to search for.
        :param list partition: A partition to search for.
        :param list external_id: An external id to search for (which was associated with the video at upload).
        :param list owner: An owner to search for.
        :param list face: A face to search for.
        :param list animatedcharacter: An animated character to search for.
        :param list query: Free text to search for.  Example 1: '&query=north america' -> searches for videos with 'north' and / or 'america' and ranks videos with more hits higher.   Example 2: '&query=north+america' -> search for videos with all of the words (AND operator).   Example 3: '&query=north|america' -> searches for videos with any of the words (OR operator).   Example 4: '&query=north&query=america' -> searches for videos with any of the words (OR operator).   Example 5: '&query=-north' -> searches for videos without the word 'north' (NOT operator).   Example 6: '&query=\"north america\"' -> searches for videos with the phrase 'north america' (exact match).   Example 7: '&query=\"north america\"'&query=-east -> searches for videos with the phrase 'north america' (exact match) OR videos without the word 'east'.   NOTICE: These parameters should be sent url-encoded. This is confusing because a space ' ' is encoded as '+' and '+' is encoded as '%2B'. Open text query like '&query=north america' is sent as '&query=north+america' and an AND query like '&query=north+america' is sent as '&query=north%2Bamerica'.
        :param list text_scope: The text scope to search in. Allowed values: Transcript / Topics / Ocr / Annotations / Brands / NamedLocations / NamedPeople
        :param list language: The language to search in. You can specify multiple language parameters (e.g. $language=English&language=French) to search multiple languages. Having no language parameter will search all languages. Videos/projects are searchable in their source language as well as any language they were translated to by another operation. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param str created_after: Filter items created before the specified date Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param str created_before: Filter items created after the specified date Accepted format: RFC 3339, section 5.6. Example: '2017-07-21T17:32:28Z'
        :param int page_size: Format - int32. The number of results to return.
        :param int skip: Format - int32. The number of results to skip (used for paging).
        :param str access_token: Required for private videos/projects or account scope search. If searching an account, you must provide a token with an Account scope.<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video/Project</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'source_language', 'is_base', 'has_source_video_file', 'source_video_id', 'state', 'privacy', 'id', 'partition', 'external_id', 'owner', 'face', 'animatedcharacter', 'query', 'text_scope', 'language', 'created_after', 'created_before', 'page_size', 'skip', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_videos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `search_videos`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `search_videos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'source_language' in params:
            query_params.append(('sourceLanguage', params['source_language']))  # noqa: E501
        if 'is_base' in params:
            query_params.append(('isBase', params['is_base']))  # noqa: E501
        if 'has_source_video_file' in params:
            query_params.append(('hasSourceVideoFile', params['has_source_video_file']))  # noqa: E501
        if 'source_video_id' in params:
            query_params.append(('sourceVideoId', params['source_video_id']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'privacy' in params:
            query_params.append(('privacy', params['privacy']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'partition' in params:
            query_params.append(('partition', params['partition']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('externalId', params['external_id']))  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'face' in params:
            query_params.append(('face', params['face']))  # noqa: E501
        if 'animatedcharacter' in params:
            query_params.append(('animatedcharacter', params['animatedcharacter']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'text_scope' in params:
            query_params.append(('textScope', params['text_scope']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('createdAfter', params['created_after']))  # noqa: E501
        if 'created_before' in params:
            query_params.append(('createdBefore', params['created_before']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/Search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_video_face(self, location, account_id, video_id, face_id, **kwargs):  # noqa: E501
        """Update Video Face  # noqa: E501

        Update Video Face.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_face(location, account_id, video_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param int face_id: Format - int32. The face id to update (required)
        :param str new_name: The face's new name
        :param str person_id: Format - guid. The person id to update (if you have multiple persons with that name)
        :param bool create_new_person: Whether to create a new person and not update an existing person with that name.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_video_face_with_http_info(location, account_id, video_id, face_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_video_face_with_http_info(location, account_id, video_id, face_id, **kwargs)  # noqa: E501
            return data

    def update_video_face_with_http_info(self, location, account_id, video_id, face_id, **kwargs):  # noqa: E501
        """Update Video Face  # noqa: E501

        Update Video Face.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_face_with_http_info(location, account_id, video_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param int face_id: Format - int32. The face id to update (required)
        :param str new_name: The face's new name
        :param str person_id: Format - guid. The person id to update (if you have multiple persons with that name)
        :param bool create_new_person: Whether to create a new person and not update an existing person with that name.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'face_id', 'new_name', 'person_id', 'create_new_person', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_video_face" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `update_video_face`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_video_face`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `update_video_face`")  # noqa: E501
        # verify the required parameter 'face_id' is set
        if ('face_id' not in params or
                params['face_id'] is None):
            raise ValueError("Missing the required parameter `face_id` when calling `update_video_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501
        if 'face_id' in params:
            path_params['faceId'] = params['face_id']  # noqa: E501

        query_params = []
        if 'new_name' in params:
            query_params.append(('newName', params['new_name']))  # noqa: E501
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'create_new_person' in params:
            query_params.append(('createNewPerson', params['create_new_person']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Index/Faces/{faceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_video_index(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Update Video Index  # noqa: E501

        Updates the video index. The method accepts a JsonPatchDocument (in the request body) consisting of the operations that need to be applied. <br> <a href= http://jsonpatch.com/ target=\"_blank\">How to construct a JSON patch request.</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_index(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param object body: The JSON Patch containing the operation to run in order to update the video index. 
Currently supporting paths: 
1. /videos/0/insights/transcript/0 (Add/Remove operations) 
2. /videos/0/insights/transcript/0/text (Replace operation) 
3. /videos/0/insights/transcript/0/instances/0/start (Replace operation) 
4. /videos/0/insights/transcript/0/instances/0/end (Replace operation) 
5. /videos/0/insights/ocr/0/text (Replace operation)
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str language: The language to get the video index by. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_video_index_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_video_index_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def update_video_index_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Update Video Index  # noqa: E501

        Updates the video index. The method accepts a JsonPatchDocument (in the request body) consisting of the operations that need to be applied. <br> <a href= http://jsonpatch.com/ target=\"_blank\">How to construct a JSON patch request.</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_index_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param object body: The JSON Patch containing the operation to run in order to update the video index. 
Currently supporting paths: 
1. /videos/0/insights/transcript/0 (Add/Remove operations) 
2. /videos/0/insights/transcript/0/text (Replace operation) 
3. /videos/0/insights/transcript/0/instances/0/start (Replace operation) 
4. /videos/0/insights/transcript/0/instances/0/end (Replace operation) 
5. /videos/0/insights/ocr/0/text (Replace operation)
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str language: The language to get the video index by. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'body', 'x_ms_client_request_id', 'language', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_video_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `update_video_index`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_video_index`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `update_video_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Index', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_video_transcript(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Update Video Transcript  # noqa: E501

        Updates the video with the given transcript. If the specified language is the source language of the video, then the video will be re-indexed with the given transcript, and the transcript of all the other languages will be re-generated. If the specified language is not the source language, the transcript of that language will be updated and the new text will be written into the existing lines and blocks of that language.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_transcript(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str body:
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str language: The language to update its transcription. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool set_as_source_language: If true the language parameter will be set as source language.
        :param str callback_url: Format - uri. A callback url to call with the status once the operation completes, relevant only when the video is re-indexed
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully re-indexed with new transcript, relevant only when the video is re-indexed
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_video_transcript_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_video_transcript_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def update_video_transcript_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Update Video Transcript  # noqa: E501

        Updates the video with the given transcript. If the specified language is the source language of the video, then the video will be re-indexed with the given transcript, and the transcript of all the other languages will be re-generated. If the specified language is not the source language, the transcript of that language will be updated and the new text will be written into the existing lines and blocks of that language.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_video_transcript_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str body:
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :param str language: The language to update its transcription. Supported languages: Afrikaans: af-ZA, Arabic (United Arab Emirates): ar-AE, Arabic Modern Standard (Bahrain): ar-BH, Arabic Egypt: ar-EG, Arabic (Israel): ar-IL, Arabic (Iraq): ar-IQ, Arabic (Jordan): ar-JO, Arabic (Kuwait): ar-KW, Arabic (Lebanon): ar-LB, Arabic (Oman): ar-OM, Arabic (Palestinian Authority): ar-PS, Arabic (Qatar): ar-QA, Arabic (Saudi Arabia): ar-SA, Arabic Syrian Arab Republic: ar-SY, Bulgarian: bg-BG, Bangla: bn-BD, Bosnian: bs-Latn, Catalan: ca-ES, Czech: cs-CZ, Danish: da-DK, German: de-DE, Greek: el-GR, English Australia: en-AU, Fijian: en-FJ, English United Kingdom: en-GB, English United States: en-US, Samoan: en-WS, Spanish: es-ES, Spanish (Mexico): es-MX, Estonian: et-EE, Persian: fa-IR, Finnish: fi-FI, Filipino: fil-PH, French (Canada): fr-CA, French: fr-FR, Haitian: fr-HT, Hebrew: he-IL, Hindi: hi-IN, Croatian: hr-HR, Hungarian: hu-HU, Indonesian: id-ID, Italian: it-IT, Japanese: ja-JP, Korean: ko-KR, Lithuanian: lt-LT, Latvian: lv-LV, Malagasy: mg-MG, Malay: ms-MY, Maltese: mt-MT, Norwegian: nb-NO, Dutch: nl-NL, Polish: pl-PL, Portuguese: pt-BR, Portuguese (Portugal): pt-PT, Romanian: ro-RO, Russian: ru-RU, Slovak: sk-SK, Slovenian: sl-SI, Serbian (Cyrillic): sr-Cyrl-RS, Serbian (Latin): sr-Latn-RS, Swedish: sv-SE, Kiswahili: sw-KE, Tamil: ta-IN, Thai: th-TH, Tongan: to-TO, Turkish: tr-TR, Ukrainian: uk-UA, Urdu: ur-PK, Vietnamese: vi-VN, Chinese (Simplified): zh-Hans, Chinese (Traditional): zh-Hant, Chinese (Cantonese, Traditional): zh-HK.
        :param bool set_as_source_language: If true the language parameter will be set as source language.
        :param str callback_url: Format - uri. A callback url to call with the status once the operation completes, relevant only when the video is re-indexed
        :param bool send_success_email: Indicates whether to send a success mail once video was succesfully re-indexed with new transcript, relevant only when the video is re-indexed
        :param str access_token: Required. Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Account/Video</b> and permission should be <b>Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'body', 'x_ms_client_request_id', 'language', 'set_as_source_language', 'callback_url', 'send_success_email', 'access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_video_transcript" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `update_video_transcript`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_video_transcript`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `update_video_transcript`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'set_as_source_language' in params:
            query_params.append(('setAsSourceLanguage', params['set_as_source_language']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackUrl', params['callback_url']))  # noqa: E501
        if 'send_success_email' in params:
            query_params.append(('sendSuccessEmail', params['send_success_email']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/vtt'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/Index/Transcript', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
