# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FramePatternInsight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confidence': 'float',
        'display_name': 'str',
        'id': 'int',
        'instances': 'list[ElementInstanceWithConfidence]',
        'name': 'str',
        'pattern_type': 'FramePatternType',
        'thumbnail_id': 'str'
    }

    attribute_map = {
        'confidence': 'confidence',
        'display_name': 'displayName',
        'id': 'id',
        'instances': 'instances',
        'name': 'name',
        'pattern_type': 'patternType',
        'thumbnail_id': 'thumbnailId'
    }

    def __init__(self, confidence=None, display_name=None, id=None, instances=None, name=None, pattern_type=None, thumbnail_id=None):  # noqa: E501
        """FramePatternInsight - a model defined in Swagger"""  # noqa: E501
        self._confidence = None
        self._display_name = None
        self._id = None
        self._instances = None
        self._name = None
        self._pattern_type = None
        self._thumbnail_id = None
        self.discriminator = None
        if confidence is not None:
            self.confidence = confidence
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if instances is not None:
            self.instances = instances
        if name is not None:
            self.name = name
        if pattern_type is not None:
            self.pattern_type = pattern_type
        if thumbnail_id is not None:
            self.thumbnail_id = thumbnail_id

    @property
    def confidence(self):
        """Gets the confidence of this FramePatternInsight.  # noqa: E501


        :return: The confidence of this FramePatternInsight.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this FramePatternInsight.


        :param confidence: The confidence of this FramePatternInsight.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def display_name(self):
        """Gets the display_name of this FramePatternInsight.  # noqa: E501


        :return: The display_name of this FramePatternInsight.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FramePatternInsight.


        :param display_name: The display_name of this FramePatternInsight.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this FramePatternInsight.  # noqa: E501


        :return: The id of this FramePatternInsight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FramePatternInsight.


        :param id: The id of this FramePatternInsight.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this FramePatternInsight.  # noqa: E501


        :return: The instances of this FramePatternInsight.  # noqa: E501
        :rtype: list[ElementInstanceWithConfidence]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this FramePatternInsight.


        :param instances: The instances of this FramePatternInsight.  # noqa: E501
        :type: list[ElementInstanceWithConfidence]
        """

        self._instances = instances

    @property
    def name(self):
        """Gets the name of this FramePatternInsight.  # noqa: E501


        :return: The name of this FramePatternInsight.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FramePatternInsight.


        :param name: The name of this FramePatternInsight.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pattern_type(self):
        """Gets the pattern_type of this FramePatternInsight.  # noqa: E501


        :return: The pattern_type of this FramePatternInsight.  # noqa: E501
        :rtype: FramePatternType
        """
        return self._pattern_type

    @pattern_type.setter
    def pattern_type(self, pattern_type):
        """Sets the pattern_type of this FramePatternInsight.


        :param pattern_type: The pattern_type of this FramePatternInsight.  # noqa: E501
        :type: FramePatternType
        """

        self._pattern_type = pattern_type

    @property
    def thumbnail_id(self):
        """Gets the thumbnail_id of this FramePatternInsight.  # noqa: E501


        :return: The thumbnail_id of this FramePatternInsight.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_id

    @thumbnail_id.setter
    def thumbnail_id(self, thumbnail_id):
        """Sets the thumbnail_id of this FramePatternInsight.


        :param thumbnail_id: The thumbnail_id of this FramePatternInsight.  # noqa: E501
        :type: str
        """

        self._thumbnail_id = thumbnail_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FramePatternInsight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FramePatternInsight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
