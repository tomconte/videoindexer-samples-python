# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomLanguageModelTrainingDataFileContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'creation_time': 'datetime',
        'creator': 'str',
        'enable': 'bool',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'content': 'content',
        'creation_time': 'creationTime',
        'creator': 'creator',
        'enable': 'enable',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, content=None, creation_time=None, creator=None, enable=None, id=None, name=None):  # noqa: E501
        """CustomLanguageModelTrainingDataFileContent - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._creation_time = None
        self._creator = None
        self._enable = None
        self._id = None
        self._name = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if creation_time is not None:
            self.creation_time = creation_time
        if creator is not None:
            self.creator = creator
        if enable is not None:
            self.enable = enable
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def content(self):
        """Gets the content of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The content of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CustomLanguageModelTrainingDataFileContent.


        :param content: The content of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def creation_time(self):
        """Gets the creation_time of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The creation_time of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CustomLanguageModelTrainingDataFileContent.


        :param creation_time: The creation_time of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def creator(self):
        """Gets the creator of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The creator of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this CustomLanguageModelTrainingDataFileContent.


        :param creator: The creator of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def enable(self):
        """Gets the enable of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The enable of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this CustomLanguageModelTrainingDataFileContent.


        :param enable: The enable of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def id(self):
        """Gets the id of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The id of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomLanguageModelTrainingDataFileContent.


        :param id: The id of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501


        :return: The name of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomLanguageModelTrainingDataFileContent.


        :param name: The name of this CustomLanguageModelTrainingDataFileContent.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomLanguageModelTrainingDataFileContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomLanguageModelTrainingDataFileContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
