# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brands_count': 'int',
        'lingusitic_models_count': 'int',
        'person_modles_count': 'int',
        'videos_count': 'int'
    }

    attribute_map = {
        'brands_count': 'brandsCount',
        'lingusitic_models_count': 'lingusiticModelsCount',
        'person_modles_count': 'personModlesCount',
        'videos_count': 'videosCount'
    }

    def __init__(self, brands_count=None, lingusitic_models_count=None, person_modles_count=None, videos_count=None):  # noqa: E501
        """AccountStatistics - a model defined in Swagger"""  # noqa: E501
        self._brands_count = None
        self._lingusitic_models_count = None
        self._person_modles_count = None
        self._videos_count = None
        self.discriminator = None
        if brands_count is not None:
            self.brands_count = brands_count
        if lingusitic_models_count is not None:
            self.lingusitic_models_count = lingusitic_models_count
        if person_modles_count is not None:
            self.person_modles_count = person_modles_count
        if videos_count is not None:
            self.videos_count = videos_count

    @property
    def brands_count(self):
        """Gets the brands_count of this AccountStatistics.  # noqa: E501


        :return: The brands_count of this AccountStatistics.  # noqa: E501
        :rtype: int
        """
        return self._brands_count

    @brands_count.setter
    def brands_count(self, brands_count):
        """Sets the brands_count of this AccountStatistics.


        :param brands_count: The brands_count of this AccountStatistics.  # noqa: E501
        :type: int
        """

        self._brands_count = brands_count

    @property
    def lingusitic_models_count(self):
        """Gets the lingusitic_models_count of this AccountStatistics.  # noqa: E501


        :return: The lingusitic_models_count of this AccountStatistics.  # noqa: E501
        :rtype: int
        """
        return self._lingusitic_models_count

    @lingusitic_models_count.setter
    def lingusitic_models_count(self, lingusitic_models_count):
        """Sets the lingusitic_models_count of this AccountStatistics.


        :param lingusitic_models_count: The lingusitic_models_count of this AccountStatistics.  # noqa: E501
        :type: int
        """

        self._lingusitic_models_count = lingusitic_models_count

    @property
    def person_modles_count(self):
        """Gets the person_modles_count of this AccountStatistics.  # noqa: E501


        :return: The person_modles_count of this AccountStatistics.  # noqa: E501
        :rtype: int
        """
        return self._person_modles_count

    @person_modles_count.setter
    def person_modles_count(self, person_modles_count):
        """Sets the person_modles_count of this AccountStatistics.


        :param person_modles_count: The person_modles_count of this AccountStatistics.  # noqa: E501
        :type: int
        """

        self._person_modles_count = person_modles_count

    @property
    def videos_count(self):
        """Gets the videos_count of this AccountStatistics.  # noqa: E501


        :return: The videos_count of this AccountStatistics.  # noqa: E501
        :rtype: int
        """
        return self._videos_count

    @videos_count.setter
    def videos_count(self, videos_count):
        """Sets the videos_count of this AccountStatistics.


        :param videos_count: The videos_count of this AccountStatistics.  # noqa: E501
        :type: int
        """

        self._videos_count = videos_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
