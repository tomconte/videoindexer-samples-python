# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomLanguageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files': 'list[CustomLanguageModelTrainingDataFile]',
        'has_cris_edits': 'bool',
        'id': 'str',
        'is_auto_generated_model': 'bool',
        'language': 'str',
        'language_model_id': 'str',
        'name': 'str',
        'state': 'str'
    }

    attribute_map = {
        'files': 'files',
        'has_cris_edits': 'hasCrisEdits',
        'id': 'id',
        'is_auto_generated_model': 'isAutoGeneratedModel',
        'language': 'language',
        'language_model_id': 'languageModelId',
        'name': 'name',
        'state': 'state'
    }

    def __init__(self, files=None, has_cris_edits=None, id=None, is_auto_generated_model=None, language=None, language_model_id=None, name=None, state=None):  # noqa: E501
        """CustomLanguageModel - a model defined in Swagger"""  # noqa: E501
        self._files = None
        self._has_cris_edits = None
        self._id = None
        self._is_auto_generated_model = None
        self._language = None
        self._language_model_id = None
        self._name = None
        self._state = None
        self.discriminator = None
        if files is not None:
            self.files = files
        if has_cris_edits is not None:
            self.has_cris_edits = has_cris_edits
        if id is not None:
            self.id = id
        if is_auto_generated_model is not None:
            self.is_auto_generated_model = is_auto_generated_model
        if language is not None:
            self.language = language
        if language_model_id is not None:
            self.language_model_id = language_model_id
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state

    @property
    def files(self):
        """Gets the files of this CustomLanguageModel.  # noqa: E501


        :return: The files of this CustomLanguageModel.  # noqa: E501
        :rtype: list[CustomLanguageModelTrainingDataFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CustomLanguageModel.


        :param files: The files of this CustomLanguageModel.  # noqa: E501
        :type: list[CustomLanguageModelTrainingDataFile]
        """

        self._files = files

    @property
    def has_cris_edits(self):
        """Gets the has_cris_edits of this CustomLanguageModel.  # noqa: E501


        :return: The has_cris_edits of this CustomLanguageModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_cris_edits

    @has_cris_edits.setter
    def has_cris_edits(self, has_cris_edits):
        """Sets the has_cris_edits of this CustomLanguageModel.


        :param has_cris_edits: The has_cris_edits of this CustomLanguageModel.  # noqa: E501
        :type: bool
        """

        self._has_cris_edits = has_cris_edits

    @property
    def id(self):
        """Gets the id of this CustomLanguageModel.  # noqa: E501


        :return: The id of this CustomLanguageModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomLanguageModel.


        :param id: The id of this CustomLanguageModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_auto_generated_model(self):
        """Gets the is_auto_generated_model of this CustomLanguageModel.  # noqa: E501


        :return: The is_auto_generated_model of this CustomLanguageModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_generated_model

    @is_auto_generated_model.setter
    def is_auto_generated_model(self, is_auto_generated_model):
        """Sets the is_auto_generated_model of this CustomLanguageModel.


        :param is_auto_generated_model: The is_auto_generated_model of this CustomLanguageModel.  # noqa: E501
        :type: bool
        """

        self._is_auto_generated_model = is_auto_generated_model

    @property
    def language(self):
        """Gets the language of this CustomLanguageModel.  # noqa: E501


        :return: The language of this CustomLanguageModel.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CustomLanguageModel.


        :param language: The language of this CustomLanguageModel.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def language_model_id(self):
        """Gets the language_model_id of this CustomLanguageModel.  # noqa: E501


        :return: The language_model_id of this CustomLanguageModel.  # noqa: E501
        :rtype: str
        """
        return self._language_model_id

    @language_model_id.setter
    def language_model_id(self, language_model_id):
        """Sets the language_model_id of this CustomLanguageModel.


        :param language_model_id: The language_model_id of this CustomLanguageModel.  # noqa: E501
        :type: str
        """

        self._language_model_id = language_model_id

    @property
    def name(self):
        """Gets the name of this CustomLanguageModel.  # noqa: E501


        :return: The name of this CustomLanguageModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomLanguageModel.


        :param name: The name of this CustomLanguageModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this CustomLanguageModel.  # noqa: E501


        :return: The state of this CustomLanguageModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomLanguageModel.


        :param state: The state of this CustomLanguageModel.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomLanguageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomLanguageModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
