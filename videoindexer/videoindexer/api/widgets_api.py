# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from videoindexer.api_client import ApiClient


class WidgetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_video_insights_widget(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Insights Widget  # noqa: E501

        Get Video Insights Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_insights_widget(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param list widget_type: The type of widgets to include. Allowed values: People / Sentiments / Keywords / Search
        :param bool allow_edit: Whether the widget allows editing of the insights
        :param str access_token: Required for private videos or if edit should be allowed. Reader or Contributor depending on whether widget should allow edit.<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Video</b> and permission should be <b>Reader/Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_insights_widget_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_insights_widget_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_insights_widget_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Insights Widget  # noqa: E501

        Get Video Insights Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_insights_widget_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param list widget_type: The type of widgets to include. Allowed values: People / Sentiments / Keywords / Search
        :param bool allow_edit: Whether the widget allows editing of the insights
        :param str access_token: Required for private videos or if edit should be allowed. Reader or Contributor depending on whether widget should allow edit.<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Video</b> and permission should be <b>Reader/Contributor</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'widget_type', 'allow_edit', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_insights_widget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_insights_widget`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_insights_widget`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_insights_widget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'widget_type' in params:
            query_params.append(('widgetType', params['widget_type']))  # noqa: E501
        if 'allow_edit' in params:
            query_params.append(('allowEdit', params['allow_edit']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/InsightsWidget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_player_widget(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Player Widget  # noqa: E501

        Get Video Player Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_player_widget(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_player_widget_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_video_player_widget_with_http_info(location, account_id, video_id, **kwargs)  # noqa: E501
            return data

    def get_video_player_widget_with_http_info(self, location, account_id, video_id, **kwargs):  # noqa: E501
        """Get Video Player Widget  # noqa: E501

        Get Video Player Widget  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_player_widget_with_http_info(location, account_id, video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location: Location indicates the Azure region to which the call should be routed<br> See more details <a href=https://aka.ms/vi-apiportal-location target=\"_blank\">here</a> (required)
        :param str account_id: Account ID is a globally unique identifier (GUID) for the account.<br> See more details <a href=https://aka.ms/vi-apiportal-useapi-accountId target=\"_blank\">here</a> (required)
        :param str video_id: The video id (required)
        :param str access_token: Required for private videos<br>  Should be given as parameter in URL query string or in Authorization header as Bearer token. Access token scope should be <b>Video</b> and permission should be <b>Reader</b>.<br>  Note that Access tokens expire within 1 hour<br> See more details for <b>Classic Account</b> <a href=https://aka.ms/DocsObtainAccessToken target=\"_blank\">here</a>, for <b>ARM Account</b> <a href=https://aka.ms/vi-classic-access-token target=\"_blank\">here</a>
        :param str x_ms_client_request_id: Format - uuid. A globally unique identifier (GUID) for the request which can be sent by client for instrumentation purposes. The server makes sure all logs associated with handling the request can be linked to the client request id so a client can provide this request id in support tickets so support engineers could find the logs linked to this particular request, so avoid using the same request id for different requests, including in retry scenarios.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location', 'account_id', 'video_id', 'access_token', 'x_ms_client_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_player_widget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location' is set
        if ('location' not in params or
                params['location'] is None):
            raise ValueError("Missing the required parameter `location` when calling `get_video_player_widget`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_video_player_widget`")  # noqa: E501
        # verify the required parameter 'video_id' is set
        if ('video_id' not in params or
                params['video_id'] is None):
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_player_widget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location' in params:
            path_params['location'] = params['location']  # noqa: E501
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'video_id' in params:
            path_params['videoId'] = params['video_id']  # noqa: E501

        query_params = []
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501

        header_params = {}
        if 'x_ms_client_request_id' in params:
            header_params['x-ms-client-request-id'] = params['x_ms_client_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{location}/Accounts/{accountId}/Videos/{videoId}/PlayerWidget', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
