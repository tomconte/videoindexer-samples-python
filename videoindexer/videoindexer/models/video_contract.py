# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created': 'datetime',
        'description': 'str',
        'duration_in_seconds': 'int',
        'id': 'str',
        'is_base': 'bool',
        'is_editable': 'bool',
        'is_owned': 'bool',
        'name': 'str',
        'partition': 'str',
        'privacy_mode': 'PrivacyMode',
        'state': 'VideoState',
        'summarized_insights': 'object',
        'user_name': 'str',
        'videos': 'list[VideoIndex]',
        'videos_ranges': 'list[VideoTimeRange]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created': 'created',
        'description': 'description',
        'duration_in_seconds': 'durationInSeconds',
        'id': 'id',
        'is_base': 'isBase',
        'is_editable': 'isEditable',
        'is_owned': 'isOwned',
        'name': 'name',
        'partition': 'partition',
        'privacy_mode': 'privacyMode',
        'state': 'state',
        'summarized_insights': 'summarizedInsights',
        'user_name': 'userName',
        'videos': 'videos',
        'videos_ranges': 'videosRanges'
    }

    def __init__(self, account_id=None, created=None, description=None, duration_in_seconds=None, id=None, is_base=None, is_editable=None, is_owned=None, name=None, partition=None, privacy_mode=None, state=None, summarized_insights=None, user_name=None, videos=None, videos_ranges=None):  # noqa: E501
        """VideoContract - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._created = None
        self._description = None
        self._duration_in_seconds = None
        self._id = None
        self._is_base = None
        self._is_editable = None
        self._is_owned = None
        self._name = None
        self._partition = None
        self._privacy_mode = None
        self._state = None
        self._summarized_insights = None
        self._user_name = None
        self._videos = None
        self._videos_ranges = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if duration_in_seconds is not None:
            self.duration_in_seconds = duration_in_seconds
        if id is not None:
            self.id = id
        if is_base is not None:
            self.is_base = is_base
        if is_editable is not None:
            self.is_editable = is_editable
        if is_owned is not None:
            self.is_owned = is_owned
        if name is not None:
            self.name = name
        if partition is not None:
            self.partition = partition
        if privacy_mode is not None:
            self.privacy_mode = privacy_mode
        if state is not None:
            self.state = state
        if summarized_insights is not None:
            self.summarized_insights = summarized_insights
        if user_name is not None:
            self.user_name = user_name
        if videos is not None:
            self.videos = videos
        if videos_ranges is not None:
            self.videos_ranges = videos_ranges

    @property
    def account_id(self):
        """Gets the account_id of this VideoContract.  # noqa: E501


        :return: The account_id of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VideoContract.


        :param account_id: The account_id of this VideoContract.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created(self):
        """Gets the created of this VideoContract.  # noqa: E501


        :return: The created of this VideoContract.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VideoContract.


        :param created: The created of this VideoContract.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this VideoContract.  # noqa: E501


        :return: The description of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoContract.


        :param description: The description of this VideoContract.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this VideoContract.  # noqa: E501


        :return: The duration_in_seconds of this VideoContract.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this VideoContract.


        :param duration_in_seconds: The duration_in_seconds of this VideoContract.  # noqa: E501
        :type: int
        """

        self._duration_in_seconds = duration_in_seconds

    @property
    def id(self):
        """Gets the id of this VideoContract.  # noqa: E501


        :return: The id of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoContract.


        :param id: The id of this VideoContract.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_base(self):
        """Gets the is_base of this VideoContract.  # noqa: E501


        :return: The is_base of this VideoContract.  # noqa: E501
        :rtype: bool
        """
        return self._is_base

    @is_base.setter
    def is_base(self, is_base):
        """Sets the is_base of this VideoContract.


        :param is_base: The is_base of this VideoContract.  # noqa: E501
        :type: bool
        """

        self._is_base = is_base

    @property
    def is_editable(self):
        """Gets the is_editable of this VideoContract.  # noqa: E501


        :return: The is_editable of this VideoContract.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this VideoContract.


        :param is_editable: The is_editable of this VideoContract.  # noqa: E501
        :type: bool
        """

        self._is_editable = is_editable

    @property
    def is_owned(self):
        """Gets the is_owned of this VideoContract.  # noqa: E501


        :return: The is_owned of this VideoContract.  # noqa: E501
        :rtype: bool
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this VideoContract.


        :param is_owned: The is_owned of this VideoContract.  # noqa: E501
        :type: bool
        """

        self._is_owned = is_owned

    @property
    def name(self):
        """Gets the name of this VideoContract.  # noqa: E501


        :return: The name of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoContract.


        :param name: The name of this VideoContract.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partition(self):
        """Gets the partition of this VideoContract.  # noqa: E501


        :return: The partition of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this VideoContract.


        :param partition: The partition of this VideoContract.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def privacy_mode(self):
        """Gets the privacy_mode of this VideoContract.  # noqa: E501


        :return: The privacy_mode of this VideoContract.  # noqa: E501
        :rtype: PrivacyMode
        """
        return self._privacy_mode

    @privacy_mode.setter
    def privacy_mode(self, privacy_mode):
        """Sets the privacy_mode of this VideoContract.


        :param privacy_mode: The privacy_mode of this VideoContract.  # noqa: E501
        :type: PrivacyMode
        """

        self._privacy_mode = privacy_mode

    @property
    def state(self):
        """Gets the state of this VideoContract.  # noqa: E501


        :return: The state of this VideoContract.  # noqa: E501
        :rtype: VideoState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VideoContract.


        :param state: The state of this VideoContract.  # noqa: E501
        :type: VideoState
        """

        self._state = state

    @property
    def summarized_insights(self):
        """Gets the summarized_insights of this VideoContract.  # noqa: E501


        :return: The summarized_insights of this VideoContract.  # noqa: E501
        :rtype: object
        """
        return self._summarized_insights

    @summarized_insights.setter
    def summarized_insights(self, summarized_insights):
        """Sets the summarized_insights of this VideoContract.


        :param summarized_insights: The summarized_insights of this VideoContract.  # noqa: E501
        :type: object
        """

        self._summarized_insights = summarized_insights

    @property
    def user_name(self):
        """Gets the user_name of this VideoContract.  # noqa: E501


        :return: The user_name of this VideoContract.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this VideoContract.


        :param user_name: The user_name of this VideoContract.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def videos(self):
        """Gets the videos of this VideoContract.  # noqa: E501


        :return: The videos of this VideoContract.  # noqa: E501
        :rtype: list[VideoIndex]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this VideoContract.


        :param videos: The videos of this VideoContract.  # noqa: E501
        :type: list[VideoIndex]
        """

        self._videos = videos

    @property
    def videos_ranges(self):
        """Gets the videos_ranges of this VideoContract.  # noqa: E501


        :return: The videos_ranges of this VideoContract.  # noqa: E501
        :rtype: list[VideoTimeRange]
        """
        return self._videos_ranges

    @videos_ranges.setter
    def videos_ranges(self, videos_ranges):
        """Sets the videos_ranges of this VideoContract.


        :param videos_ranges: The videos_ranges of this VideoContract.  # noqa: E501
        :type: list[VideoTimeRange]
        """

        self._videos_ranges = videos_ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoContract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
