# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RenderedProjectInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'published_proxy_url': 'str',
        'published_url': 'str',
        'view_token': 'str'
    }

    attribute_map = {
        'published_proxy_url': 'publishedProxyUrl',
        'published_url': 'publishedUrl',
        'view_token': 'viewToken'
    }

    def __init__(self, published_proxy_url=None, published_url=None, view_token=None):  # noqa: E501
        """RenderedProjectInfo - a model defined in Swagger"""  # noqa: E501
        self._published_proxy_url = None
        self._published_url = None
        self._view_token = None
        self.discriminator = None
        if published_proxy_url is not None:
            self.published_proxy_url = published_proxy_url
        if published_url is not None:
            self.published_url = published_url
        if view_token is not None:
            self.view_token = view_token

    @property
    def published_proxy_url(self):
        """Gets the published_proxy_url of this RenderedProjectInfo.  # noqa: E501


        :return: The published_proxy_url of this RenderedProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._published_proxy_url

    @published_proxy_url.setter
    def published_proxy_url(self, published_proxy_url):
        """Sets the published_proxy_url of this RenderedProjectInfo.


        :param published_proxy_url: The published_proxy_url of this RenderedProjectInfo.  # noqa: E501
        :type: str
        """

        self._published_proxy_url = published_proxy_url

    @property
    def published_url(self):
        """Gets the published_url of this RenderedProjectInfo.  # noqa: E501


        :return: The published_url of this RenderedProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._published_url

    @published_url.setter
    def published_url(self, published_url):
        """Sets the published_url of this RenderedProjectInfo.


        :param published_url: The published_url of this RenderedProjectInfo.  # noqa: E501
        :type: str
        """

        self._published_url = published_url

    @property
    def view_token(self):
        """Gets the view_token of this RenderedProjectInfo.  # noqa: E501


        :return: The view_token of this RenderedProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._view_token

    @view_token.setter
    def view_token(self, view_token):
        """Sets the view_token of this RenderedProjectInfo.


        :param view_token: The view_token of this RenderedProjectInfo.  # noqa: E501
        :type: str
        """

        self._view_token = view_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RenderedProjectInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenderedProjectInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
