# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomBrand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'create': 'datetime',
        'description': 'str',
        'enabled': 'bool',
        'id': 'int',
        'last_modified': 'datetime',
        'last_modifier_user_name': 'str',
        'name': 'str',
        'reference_url': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'create': 'create',
        'description': 'description',
        'enabled': 'enabled',
        'id': 'id',
        'last_modified': 'lastModified',
        'last_modifier_user_name': 'lastModifierUserName',
        'name': 'name',
        'reference_url': 'referenceUrl',
        'tags': 'tags'
    }

    def __init__(self, account_id=None, create=None, description=None, enabled=None, id=None, last_modified=None, last_modifier_user_name=None, name=None, reference_url=None, tags=None):  # noqa: E501
        """CustomBrand - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._create = None
        self._description = None
        self._enabled = None
        self._id = None
        self._last_modified = None
        self._last_modifier_user_name = None
        self._name = None
        self._reference_url = None
        self._tags = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modifier_user_name is not None:
            self.last_modifier_user_name = last_modifier_user_name
        if name is not None:
            self.name = name
        if reference_url is not None:
            self.reference_url = reference_url
        if tags is not None:
            self.tags = tags

    @property
    def account_id(self):
        """Gets the account_id of this CustomBrand.  # noqa: E501


        :return: The account_id of this CustomBrand.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CustomBrand.


        :param account_id: The account_id of this CustomBrand.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def create(self):
        """Gets the create of this CustomBrand.  # noqa: E501


        :return: The create of this CustomBrand.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this CustomBrand.


        :param create: The create of this CustomBrand.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this CustomBrand.  # noqa: E501


        :return: The description of this CustomBrand.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomBrand.


        :param description: The description of this CustomBrand.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this CustomBrand.  # noqa: E501


        :return: The enabled of this CustomBrand.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CustomBrand.


        :param enabled: The enabled of this CustomBrand.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this CustomBrand.  # noqa: E501


        :return: The id of this CustomBrand.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomBrand.


        :param id: The id of this CustomBrand.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this CustomBrand.  # noqa: E501


        :return: The last_modified of this CustomBrand.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CustomBrand.


        :param last_modified: The last_modified of this CustomBrand.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def last_modifier_user_name(self):
        """Gets the last_modifier_user_name of this CustomBrand.  # noqa: E501


        :return: The last_modifier_user_name of this CustomBrand.  # noqa: E501
        :rtype: str
        """
        return self._last_modifier_user_name

    @last_modifier_user_name.setter
    def last_modifier_user_name(self, last_modifier_user_name):
        """Sets the last_modifier_user_name of this CustomBrand.


        :param last_modifier_user_name: The last_modifier_user_name of this CustomBrand.  # noqa: E501
        :type: str
        """

        self._last_modifier_user_name = last_modifier_user_name

    @property
    def name(self):
        """Gets the name of this CustomBrand.  # noqa: E501


        :return: The name of this CustomBrand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomBrand.


        :param name: The name of this CustomBrand.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reference_url(self):
        """Gets the reference_url of this CustomBrand.  # noqa: E501


        :return: The reference_url of this CustomBrand.  # noqa: E501
        :rtype: str
        """
        return self._reference_url

    @reference_url.setter
    def reference_url(self, reference_url):
        """Sets the reference_url of this CustomBrand.


        :param reference_url: The reference_url of this CustomBrand.  # noqa: E501
        :type: str
        """

        self._reference_url = reference_url

    @property
    def tags(self):
        """Gets the tags of this CustomBrand.  # noqa: E501


        :return: The tags of this CustomBrand.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CustomBrand.


        :param tags: The tags of this CustomBrand.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomBrand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomBrand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
