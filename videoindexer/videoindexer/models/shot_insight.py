# coding: utf-8

"""
    Operations

    The Operations API contains all the Azure Video Indexer APIs, like Upload video, Get insights and more, as well as authorization operations to get access tokens for calling the other operations. For Azure Resource Manager (ARM)-based accounts, some REST APIs like generating an access token, list of all accounts, and updating existing accounts <a href=\"https://aka.ms/avam-arm-api\" target=\"_blank\">can be found here</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShotInsight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'instances': 'list[InsightInstance]',
        'key_frames': 'list[KeyFrameInsight]',
        'tags': 'list[ShotTag]'
    }

    attribute_map = {
        'id': 'id',
        'instances': 'instances',
        'key_frames': 'keyFrames',
        'tags': 'tags'
    }

    def __init__(self, id=None, instances=None, key_frames=None, tags=None):  # noqa: E501
        """ShotInsight - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._instances = None
        self._key_frames = None
        self._tags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if instances is not None:
            self.instances = instances
        if key_frames is not None:
            self.key_frames = key_frames
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this ShotInsight.  # noqa: E501


        :return: The id of this ShotInsight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShotInsight.


        :param id: The id of this ShotInsight.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this ShotInsight.  # noqa: E501


        :return: The instances of this ShotInsight.  # noqa: E501
        :rtype: list[InsightInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this ShotInsight.


        :param instances: The instances of this ShotInsight.  # noqa: E501
        :type: list[InsightInstance]
        """

        self._instances = instances

    @property
    def key_frames(self):
        """Gets the key_frames of this ShotInsight.  # noqa: E501


        :return: The key_frames of this ShotInsight.  # noqa: E501
        :rtype: list[KeyFrameInsight]
        """
        return self._key_frames

    @key_frames.setter
    def key_frames(self, key_frames):
        """Sets the key_frames of this ShotInsight.


        :param key_frames: The key_frames of this ShotInsight.  # noqa: E501
        :type: list[KeyFrameInsight]
        """

        self._key_frames = key_frames

    @property
    def tags(self):
        """Gets the tags of this ShotInsight.  # noqa: E501


        :return: The tags of this ShotInsight.  # noqa: E501
        :rtype: list[ShotTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ShotInsight.


        :param tags: The tags of this ShotInsight.  # noqa: E501
        :type: list[ShotTag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShotInsight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShotInsight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
